
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model bookings
 * 
 */
export type bookings = $Result.DefaultSelection<Prisma.$bookingsPayload>
/**
 * Model carTypes
 * 
 */
export type carTypes = $Result.DefaultSelection<Prisma.$carTypesPayload>
/**
 * Model carBrands
 * 
 */
export type carBrands = $Result.DefaultSelection<Prisma.$carBrandsPayload>
/**
 * Model cars
 * 
 */
export type cars = $Result.DefaultSelection<Prisma.$carsPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Bookings
 * const bookings = await prisma.bookings.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Bookings
   * const bookings = await prisma.bookings.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.bookings`: Exposes CRUD operations for the **bookings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.bookings.findMany()
    * ```
    */
  get bookings(): Prisma.bookingsDelegate<ExtArgs>;

  /**
   * `prisma.carTypes`: Exposes CRUD operations for the **carTypes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarTypes
    * const carTypes = await prisma.carTypes.findMany()
    * ```
    */
  get carTypes(): Prisma.carTypesDelegate<ExtArgs>;

  /**
   * `prisma.carBrands`: Exposes CRUD operations for the **carBrands** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarBrands
    * const carBrands = await prisma.carBrands.findMany()
    * ```
    */
  get carBrands(): Prisma.carBrandsDelegate<ExtArgs>;

  /**
   * `prisma.cars`: Exposes CRUD operations for the **cars** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cars
    * const cars = await prisma.cars.findMany()
    * ```
    */
  get cars(): Prisma.carsDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.0
   * Query Engine version: 475c616176945d72f4330c92801f0c5e6398dc0f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    bookings: 'bookings',
    carTypes: 'carTypes',
    carBrands: 'carBrands',
    cars: 'cars',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'bookings' | 'carTypes' | 'carBrands' | 'cars' | 'users'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      bookings: {
        payload: Prisma.$bookingsPayload<ExtArgs>
        fields: Prisma.bookingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bookingsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bookingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bookingsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bookingsPayload>
          }
          findFirst: {
            args: Prisma.bookingsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bookingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bookingsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bookingsPayload>
          }
          findMany: {
            args: Prisma.bookingsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bookingsPayload>[]
          }
          create: {
            args: Prisma.bookingsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bookingsPayload>
          }
          createMany: {
            args: Prisma.bookingsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.bookingsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bookingsPayload>
          }
          update: {
            args: Prisma.bookingsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bookingsPayload>
          }
          deleteMany: {
            args: Prisma.bookingsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.bookingsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.bookingsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bookingsPayload>
          }
          aggregate: {
            args: Prisma.BookingsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBookings>
          }
          groupBy: {
            args: Prisma.bookingsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BookingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.bookingsCountArgs<ExtArgs>,
            result: $Utils.Optional<BookingsCountAggregateOutputType> | number
          }
        }
      }
      carTypes: {
        payload: Prisma.$carTypesPayload<ExtArgs>
        fields: Prisma.carTypesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.carTypesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carTypesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.carTypesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carTypesPayload>
          }
          findFirst: {
            args: Prisma.carTypesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carTypesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.carTypesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carTypesPayload>
          }
          findMany: {
            args: Prisma.carTypesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carTypesPayload>[]
          }
          create: {
            args: Prisma.carTypesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carTypesPayload>
          }
          createMany: {
            args: Prisma.carTypesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.carTypesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carTypesPayload>
          }
          update: {
            args: Prisma.carTypesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carTypesPayload>
          }
          deleteMany: {
            args: Prisma.carTypesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.carTypesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.carTypesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carTypesPayload>
          }
          aggregate: {
            args: Prisma.CarTypesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCarTypes>
          }
          groupBy: {
            args: Prisma.carTypesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CarTypesGroupByOutputType>[]
          }
          count: {
            args: Prisma.carTypesCountArgs<ExtArgs>,
            result: $Utils.Optional<CarTypesCountAggregateOutputType> | number
          }
        }
      }
      carBrands: {
        payload: Prisma.$carBrandsPayload<ExtArgs>
        fields: Prisma.carBrandsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.carBrandsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carBrandsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.carBrandsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carBrandsPayload>
          }
          findFirst: {
            args: Prisma.carBrandsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carBrandsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.carBrandsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carBrandsPayload>
          }
          findMany: {
            args: Prisma.carBrandsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carBrandsPayload>[]
          }
          create: {
            args: Prisma.carBrandsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carBrandsPayload>
          }
          createMany: {
            args: Prisma.carBrandsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.carBrandsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carBrandsPayload>
          }
          update: {
            args: Prisma.carBrandsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carBrandsPayload>
          }
          deleteMany: {
            args: Prisma.carBrandsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.carBrandsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.carBrandsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carBrandsPayload>
          }
          aggregate: {
            args: Prisma.CarBrandsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCarBrands>
          }
          groupBy: {
            args: Prisma.carBrandsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CarBrandsGroupByOutputType>[]
          }
          count: {
            args: Prisma.carBrandsCountArgs<ExtArgs>,
            result: $Utils.Optional<CarBrandsCountAggregateOutputType> | number
          }
        }
      }
      cars: {
        payload: Prisma.$carsPayload<ExtArgs>
        fields: Prisma.carsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.carsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.carsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carsPayload>
          }
          findFirst: {
            args: Prisma.carsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.carsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carsPayload>
          }
          findMany: {
            args: Prisma.carsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carsPayload>[]
          }
          create: {
            args: Prisma.carsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carsPayload>
          }
          createMany: {
            args: Prisma.carsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.carsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carsPayload>
          }
          update: {
            args: Prisma.carsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carsPayload>
          }
          deleteMany: {
            args: Prisma.carsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.carsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.carsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carsPayload>
          }
          aggregate: {
            args: Prisma.CarsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCars>
          }
          groupBy: {
            args: Prisma.carsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CarsGroupByOutputType>[]
          }
          count: {
            args: Prisma.carsCountArgs<ExtArgs>,
            result: $Utils.Optional<CarsCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CarTypesCountOutputType
   */

  export type CarTypesCountOutputType = {
    cars: number
  }

  export type CarTypesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | CarTypesCountOutputTypeCountCarsArgs
  }

  // Custom InputTypes

  /**
   * CarTypesCountOutputType without action
   */
  export type CarTypesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarTypesCountOutputType
     */
    select?: CarTypesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CarTypesCountOutputType without action
   */
  export type CarTypesCountOutputTypeCountCarsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carsWhereInput
  }



  /**
   * Count Type CarBrandsCountOutputType
   */

  export type CarBrandsCountOutputType = {
    cars: number
  }

  export type CarBrandsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | CarBrandsCountOutputTypeCountCarsArgs
  }

  // Custom InputTypes

  /**
   * CarBrandsCountOutputType without action
   */
  export type CarBrandsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarBrandsCountOutputType
     */
    select?: CarBrandsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CarBrandsCountOutputType without action
   */
  export type CarBrandsCountOutputTypeCountCarsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carsWhereInput
  }



  /**
   * Count Type CarsCountOutputType
   */

  export type CarsCountOutputType = {
    bookings: number
  }

  export type CarsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | CarsCountOutputTypeCountBookingsArgs
  }

  // Custom InputTypes

  /**
   * CarsCountOutputType without action
   */
  export type CarsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarsCountOutputType
     */
    select?: CarsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CarsCountOutputType without action
   */
  export type CarsCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bookingsWhereInput
  }



  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    bookings: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | UsersCountOutputTypeCountBookingsArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bookingsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model bookings
   */

  export type AggregateBookings = {
    _count: BookingsCountAggregateOutputType | null
    _avg: BookingsAvgAggregateOutputType | null
    _sum: BookingsSumAggregateOutputType | null
    _min: BookingsMinAggregateOutputType | null
    _max: BookingsMaxAggregateOutputType | null
  }

  export type BookingsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    carId: number | null
    duration: number | null
    bookedPrice: number | null
  }

  export type BookingsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    carId: number | null
    duration: number | null
    bookedPrice: number | null
  }

  export type BookingsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    carId: number | null
    startTime: Date | null
    endTime: Date | null
    duration: number | null
    status: string | null
    bookedPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    carId: number | null
    startTime: Date | null
    endTime: Date | null
    duration: number | null
    status: string | null
    bookedPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingsCountAggregateOutputType = {
    id: number
    userId: number
    carId: number
    startTime: number
    endTime: number
    duration: number
    status: number
    bookedPrice: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookingsAvgAggregateInputType = {
    id?: true
    userId?: true
    carId?: true
    duration?: true
    bookedPrice?: true
  }

  export type BookingsSumAggregateInputType = {
    id?: true
    userId?: true
    carId?: true
    duration?: true
    bookedPrice?: true
  }

  export type BookingsMinAggregateInputType = {
    id?: true
    userId?: true
    carId?: true
    startTime?: true
    endTime?: true
    duration?: true
    status?: true
    bookedPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingsMaxAggregateInputType = {
    id?: true
    userId?: true
    carId?: true
    startTime?: true
    endTime?: true
    duration?: true
    status?: true
    bookedPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingsCountAggregateInputType = {
    id?: true
    userId?: true
    carId?: true
    startTime?: true
    endTime?: true
    duration?: true
    status?: true
    bookedPrice?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bookings to aggregate.
     */
    where?: bookingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookings to fetch.
     */
    orderBy?: bookingsOrderByWithRelationInput | bookingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bookingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bookings
    **/
    _count?: true | BookingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingsMaxAggregateInputType
  }

  export type GetBookingsAggregateType<T extends BookingsAggregateArgs> = {
        [P in keyof T & keyof AggregateBookings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookings[P]>
      : GetScalarType<T[P], AggregateBookings[P]>
  }




  export type bookingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bookingsWhereInput
    orderBy?: bookingsOrderByWithAggregationInput | bookingsOrderByWithAggregationInput[]
    by: BookingsScalarFieldEnum[] | BookingsScalarFieldEnum
    having?: bookingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingsCountAggregateInputType | true
    _avg?: BookingsAvgAggregateInputType
    _sum?: BookingsSumAggregateInputType
    _min?: BookingsMinAggregateInputType
    _max?: BookingsMaxAggregateInputType
  }

  export type BookingsGroupByOutputType = {
    id: number
    userId: number
    carId: number
    startTime: Date
    endTime: Date
    duration: number
    status: string
    bookedPrice: number
    createdAt: Date
    updatedAt: Date | null
    _count: BookingsCountAggregateOutputType | null
    _avg: BookingsAvgAggregateOutputType | null
    _sum: BookingsSumAggregateOutputType | null
    _min: BookingsMinAggregateOutputType | null
    _max: BookingsMaxAggregateOutputType | null
  }

  type GetBookingsGroupByPayload<T extends bookingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingsGroupByOutputType[P]>
            : GetScalarType<T[P], BookingsGroupByOutputType[P]>
        }
      >
    >


  export type bookingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    carId?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    status?: boolean
    bookedPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cars?: boolean | carsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookings"]>

  export type bookingsSelectScalar = {
    id?: boolean
    userId?: boolean
    carId?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    status?: boolean
    bookedPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type bookingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | carsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }


  export type $bookingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "bookings"
    objects: {
      cars: Prisma.$carsPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      carId: number
      startTime: Date
      endTime: Date
      duration: number
      status: string
      bookedPrice: number
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["bookings"]>
    composites: {}
  }


  type bookingsGetPayload<S extends boolean | null | undefined | bookingsDefaultArgs> = $Result.GetResult<Prisma.$bookingsPayload, S>

  type bookingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<bookingsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: BookingsCountAggregateInputType | true
    }

  export interface bookingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['bookings'], meta: { name: 'bookings' } }
    /**
     * Find zero or one Bookings that matches the filter.
     * @param {bookingsFindUniqueArgs} args - Arguments to find a Bookings
     * @example
     * // Get one Bookings
     * const bookings = await prisma.bookings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends bookingsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, bookingsFindUniqueArgs<ExtArgs>>
    ): Prisma__bookingsClient<$Result.GetResult<Prisma.$bookingsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Bookings that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {bookingsFindUniqueOrThrowArgs} args - Arguments to find a Bookings
     * @example
     * // Get one Bookings
     * const bookings = await prisma.bookings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends bookingsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, bookingsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__bookingsClient<$Result.GetResult<Prisma.$bookingsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingsFindFirstArgs} args - Arguments to find a Bookings
     * @example
     * // Get one Bookings
     * const bookings = await prisma.bookings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends bookingsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, bookingsFindFirstArgs<ExtArgs>>
    ): Prisma__bookingsClient<$Result.GetResult<Prisma.$bookingsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Bookings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingsFindFirstOrThrowArgs} args - Arguments to find a Bookings
     * @example
     * // Get one Bookings
     * const bookings = await prisma.bookings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends bookingsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, bookingsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__bookingsClient<$Result.GetResult<Prisma.$bookingsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.bookings.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.bookings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingsWithIdOnly = await prisma.bookings.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends bookingsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bookingsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bookingsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Bookings.
     * @param {bookingsCreateArgs} args - Arguments to create a Bookings.
     * @example
     * // Create one Bookings
     * const Bookings = await prisma.bookings.create({
     *   data: {
     *     // ... data to create a Bookings
     *   }
     * })
     * 
    **/
    create<T extends bookingsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, bookingsCreateArgs<ExtArgs>>
    ): Prisma__bookingsClient<$Result.GetResult<Prisma.$bookingsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Bookings.
     *     @param {bookingsCreateManyArgs} args - Arguments to create many Bookings.
     *     @example
     *     // Create many Bookings
     *     const bookings = await prisma.bookings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends bookingsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bookingsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bookings.
     * @param {bookingsDeleteArgs} args - Arguments to delete one Bookings.
     * @example
     * // Delete one Bookings
     * const Bookings = await prisma.bookings.delete({
     *   where: {
     *     // ... filter to delete one Bookings
     *   }
     * })
     * 
    **/
    delete<T extends bookingsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, bookingsDeleteArgs<ExtArgs>>
    ): Prisma__bookingsClient<$Result.GetResult<Prisma.$bookingsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Bookings.
     * @param {bookingsUpdateArgs} args - Arguments to update one Bookings.
     * @example
     * // Update one Bookings
     * const bookings = await prisma.bookings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends bookingsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, bookingsUpdateArgs<ExtArgs>>
    ): Prisma__bookingsClient<$Result.GetResult<Prisma.$bookingsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Bookings.
     * @param {bookingsDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.bookings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends bookingsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bookingsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const bookings = await prisma.bookings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends bookingsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, bookingsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bookings.
     * @param {bookingsUpsertArgs} args - Arguments to update or create a Bookings.
     * @example
     * // Update or create a Bookings
     * const bookings = await prisma.bookings.upsert({
     *   create: {
     *     // ... data to create a Bookings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bookings we want to update
     *   }
     * })
    **/
    upsert<T extends bookingsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, bookingsUpsertArgs<ExtArgs>>
    ): Prisma__bookingsClient<$Result.GetResult<Prisma.$bookingsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingsCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.bookings.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends bookingsCountArgs>(
      args?: Subset<T, bookingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingsAggregateArgs>(args: Subset<T, BookingsAggregateArgs>): Prisma.PrismaPromise<GetBookingsAggregateType<T>>

    /**
     * Group by Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bookingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bookingsGroupByArgs['orderBy'] }
        : { orderBy?: bookingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bookingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the bookings model
   */
  readonly fields: bookingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for bookings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bookingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cars<T extends carsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, carsDefaultArgs<ExtArgs>>): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the bookings model
   */ 
  interface bookingsFieldRefs {
    readonly id: FieldRef<"bookings", 'Int'>
    readonly userId: FieldRef<"bookings", 'Int'>
    readonly carId: FieldRef<"bookings", 'Int'>
    readonly startTime: FieldRef<"bookings", 'DateTime'>
    readonly endTime: FieldRef<"bookings", 'DateTime'>
    readonly duration: FieldRef<"bookings", 'Int'>
    readonly status: FieldRef<"bookings", 'String'>
    readonly bookedPrice: FieldRef<"bookings", 'Float'>
    readonly createdAt: FieldRef<"bookings", 'DateTime'>
    readonly updatedAt: FieldRef<"bookings", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * bookings findUnique
   */
  export type bookingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookings
     */
    select?: bookingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingsInclude<ExtArgs> | null
    /**
     * Filter, which bookings to fetch.
     */
    where: bookingsWhereUniqueInput
  }


  /**
   * bookings findUniqueOrThrow
   */
  export type bookingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookings
     */
    select?: bookingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingsInclude<ExtArgs> | null
    /**
     * Filter, which bookings to fetch.
     */
    where: bookingsWhereUniqueInput
  }


  /**
   * bookings findFirst
   */
  export type bookingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookings
     */
    select?: bookingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingsInclude<ExtArgs> | null
    /**
     * Filter, which bookings to fetch.
     */
    where?: bookingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookings to fetch.
     */
    orderBy?: bookingsOrderByWithRelationInput | bookingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bookings.
     */
    cursor?: bookingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bookings.
     */
    distinct?: BookingsScalarFieldEnum | BookingsScalarFieldEnum[]
  }


  /**
   * bookings findFirstOrThrow
   */
  export type bookingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookings
     */
    select?: bookingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingsInclude<ExtArgs> | null
    /**
     * Filter, which bookings to fetch.
     */
    where?: bookingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookings to fetch.
     */
    orderBy?: bookingsOrderByWithRelationInput | bookingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bookings.
     */
    cursor?: bookingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bookings.
     */
    distinct?: BookingsScalarFieldEnum | BookingsScalarFieldEnum[]
  }


  /**
   * bookings findMany
   */
  export type bookingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookings
     */
    select?: bookingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingsInclude<ExtArgs> | null
    /**
     * Filter, which bookings to fetch.
     */
    where?: bookingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookings to fetch.
     */
    orderBy?: bookingsOrderByWithRelationInput | bookingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bookings.
     */
    cursor?: bookingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookings.
     */
    skip?: number
    distinct?: BookingsScalarFieldEnum | BookingsScalarFieldEnum[]
  }


  /**
   * bookings create
   */
  export type bookingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookings
     */
    select?: bookingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingsInclude<ExtArgs> | null
    /**
     * The data needed to create a bookings.
     */
    data: XOR<bookingsCreateInput, bookingsUncheckedCreateInput>
  }


  /**
   * bookings createMany
   */
  export type bookingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many bookings.
     */
    data: bookingsCreateManyInput | bookingsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * bookings update
   */
  export type bookingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookings
     */
    select?: bookingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingsInclude<ExtArgs> | null
    /**
     * The data needed to update a bookings.
     */
    data: XOR<bookingsUpdateInput, bookingsUncheckedUpdateInput>
    /**
     * Choose, which bookings to update.
     */
    where: bookingsWhereUniqueInput
  }


  /**
   * bookings updateMany
   */
  export type bookingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update bookings.
     */
    data: XOR<bookingsUpdateManyMutationInput, bookingsUncheckedUpdateManyInput>
    /**
     * Filter which bookings to update
     */
    where?: bookingsWhereInput
  }


  /**
   * bookings upsert
   */
  export type bookingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookings
     */
    select?: bookingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingsInclude<ExtArgs> | null
    /**
     * The filter to search for the bookings to update in case it exists.
     */
    where: bookingsWhereUniqueInput
    /**
     * In case the bookings found by the `where` argument doesn't exist, create a new bookings with this data.
     */
    create: XOR<bookingsCreateInput, bookingsUncheckedCreateInput>
    /**
     * In case the bookings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bookingsUpdateInput, bookingsUncheckedUpdateInput>
  }


  /**
   * bookings delete
   */
  export type bookingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookings
     */
    select?: bookingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingsInclude<ExtArgs> | null
    /**
     * Filter which bookings to delete.
     */
    where: bookingsWhereUniqueInput
  }


  /**
   * bookings deleteMany
   */
  export type bookingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bookings to delete
     */
    where?: bookingsWhereInput
  }


  /**
   * bookings without action
   */
  export type bookingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookings
     */
    select?: bookingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingsInclude<ExtArgs> | null
  }



  /**
   * Model carTypes
   */

  export type AggregateCarTypes = {
    _count: CarTypesCountAggregateOutputType | null
    _avg: CarTypesAvgAggregateOutputType | null
    _sum: CarTypesSumAggregateOutputType | null
    _min: CarTypesMinAggregateOutputType | null
    _max: CarTypesMaxAggregateOutputType | null
  }

  export type CarTypesAvgAggregateOutputType = {
    id: number | null
  }

  export type CarTypesSumAggregateOutputType = {
    id: number | null
  }

  export type CarTypesMinAggregateOutputType = {
    id: number | null
    typeName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarTypesMaxAggregateOutputType = {
    id: number | null
    typeName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarTypesCountAggregateOutputType = {
    id: number
    typeName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CarTypesAvgAggregateInputType = {
    id?: true
  }

  export type CarTypesSumAggregateInputType = {
    id?: true
  }

  export type CarTypesMinAggregateInputType = {
    id?: true
    typeName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarTypesMaxAggregateInputType = {
    id?: true
    typeName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarTypesCountAggregateInputType = {
    id?: true
    typeName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CarTypesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which carTypes to aggregate.
     */
    where?: carTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carTypes to fetch.
     */
    orderBy?: carTypesOrderByWithRelationInput | carTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: carTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned carTypes
    **/
    _count?: true | CarTypesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarTypesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarTypesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarTypesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarTypesMaxAggregateInputType
  }

  export type GetCarTypesAggregateType<T extends CarTypesAggregateArgs> = {
        [P in keyof T & keyof AggregateCarTypes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarTypes[P]>
      : GetScalarType<T[P], AggregateCarTypes[P]>
  }




  export type carTypesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carTypesWhereInput
    orderBy?: carTypesOrderByWithAggregationInput | carTypesOrderByWithAggregationInput[]
    by: CarTypesScalarFieldEnum[] | CarTypesScalarFieldEnum
    having?: carTypesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarTypesCountAggregateInputType | true
    _avg?: CarTypesAvgAggregateInputType
    _sum?: CarTypesSumAggregateInputType
    _min?: CarTypesMinAggregateInputType
    _max?: CarTypesMaxAggregateInputType
  }

  export type CarTypesGroupByOutputType = {
    id: number
    typeName: string
    createdAt: Date
    updatedAt: Date | null
    _count: CarTypesCountAggregateOutputType | null
    _avg: CarTypesAvgAggregateOutputType | null
    _sum: CarTypesSumAggregateOutputType | null
    _min: CarTypesMinAggregateOutputType | null
    _max: CarTypesMaxAggregateOutputType | null
  }

  type GetCarTypesGroupByPayload<T extends carTypesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarTypesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarTypesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarTypesGroupByOutputType[P]>
            : GetScalarType<T[P], CarTypesGroupByOutputType[P]>
        }
      >
    >


  export type carTypesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    typeName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cars?: boolean | carTypes$carsArgs<ExtArgs>
    _count?: boolean | CarTypesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carTypes"]>

  export type carTypesSelectScalar = {
    id?: boolean
    typeName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type carTypesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | carTypes$carsArgs<ExtArgs>
    _count?: boolean | CarTypesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $carTypesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "carTypes"
    objects: {
      cars: Prisma.$carsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      typeName: string
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["carTypes"]>
    composites: {}
  }


  type carTypesGetPayload<S extends boolean | null | undefined | carTypesDefaultArgs> = $Result.GetResult<Prisma.$carTypesPayload, S>

  type carTypesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<carTypesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CarTypesCountAggregateInputType | true
    }

  export interface carTypesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['carTypes'], meta: { name: 'carTypes' } }
    /**
     * Find zero or one CarTypes that matches the filter.
     * @param {carTypesFindUniqueArgs} args - Arguments to find a CarTypes
     * @example
     * // Get one CarTypes
     * const carTypes = await prisma.carTypes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends carTypesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, carTypesFindUniqueArgs<ExtArgs>>
    ): Prisma__carTypesClient<$Result.GetResult<Prisma.$carTypesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CarTypes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {carTypesFindUniqueOrThrowArgs} args - Arguments to find a CarTypes
     * @example
     * // Get one CarTypes
     * const carTypes = await prisma.carTypes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends carTypesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, carTypesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__carTypesClient<$Result.GetResult<Prisma.$carTypesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CarTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carTypesFindFirstArgs} args - Arguments to find a CarTypes
     * @example
     * // Get one CarTypes
     * const carTypes = await prisma.carTypes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends carTypesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, carTypesFindFirstArgs<ExtArgs>>
    ): Prisma__carTypesClient<$Result.GetResult<Prisma.$carTypesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CarTypes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carTypesFindFirstOrThrowArgs} args - Arguments to find a CarTypes
     * @example
     * // Get one CarTypes
     * const carTypes = await prisma.carTypes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends carTypesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, carTypesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__carTypesClient<$Result.GetResult<Prisma.$carTypesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CarTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carTypesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarTypes
     * const carTypes = await prisma.carTypes.findMany()
     * 
     * // Get first 10 CarTypes
     * const carTypes = await prisma.carTypes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carTypesWithIdOnly = await prisma.carTypes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends carTypesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, carTypesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carTypesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CarTypes.
     * @param {carTypesCreateArgs} args - Arguments to create a CarTypes.
     * @example
     * // Create one CarTypes
     * const CarTypes = await prisma.carTypes.create({
     *   data: {
     *     // ... data to create a CarTypes
     *   }
     * })
     * 
    **/
    create<T extends carTypesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, carTypesCreateArgs<ExtArgs>>
    ): Prisma__carTypesClient<$Result.GetResult<Prisma.$carTypesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CarTypes.
     *     @param {carTypesCreateManyArgs} args - Arguments to create many CarTypes.
     *     @example
     *     // Create many CarTypes
     *     const carTypes = await prisma.carTypes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends carTypesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, carTypesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CarTypes.
     * @param {carTypesDeleteArgs} args - Arguments to delete one CarTypes.
     * @example
     * // Delete one CarTypes
     * const CarTypes = await prisma.carTypes.delete({
     *   where: {
     *     // ... filter to delete one CarTypes
     *   }
     * })
     * 
    **/
    delete<T extends carTypesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, carTypesDeleteArgs<ExtArgs>>
    ): Prisma__carTypesClient<$Result.GetResult<Prisma.$carTypesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CarTypes.
     * @param {carTypesUpdateArgs} args - Arguments to update one CarTypes.
     * @example
     * // Update one CarTypes
     * const carTypes = await prisma.carTypes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends carTypesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, carTypesUpdateArgs<ExtArgs>>
    ): Prisma__carTypesClient<$Result.GetResult<Prisma.$carTypesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CarTypes.
     * @param {carTypesDeleteManyArgs} args - Arguments to filter CarTypes to delete.
     * @example
     * // Delete a few CarTypes
     * const { count } = await prisma.carTypes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends carTypesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, carTypesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carTypesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarTypes
     * const carTypes = await prisma.carTypes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends carTypesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, carTypesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CarTypes.
     * @param {carTypesUpsertArgs} args - Arguments to update or create a CarTypes.
     * @example
     * // Update or create a CarTypes
     * const carTypes = await prisma.carTypes.upsert({
     *   create: {
     *     // ... data to create a CarTypes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarTypes we want to update
     *   }
     * })
    **/
    upsert<T extends carTypesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, carTypesUpsertArgs<ExtArgs>>
    ): Prisma__carTypesClient<$Result.GetResult<Prisma.$carTypesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CarTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carTypesCountArgs} args - Arguments to filter CarTypes to count.
     * @example
     * // Count the number of CarTypes
     * const count = await prisma.carTypes.count({
     *   where: {
     *     // ... the filter for the CarTypes we want to count
     *   }
     * })
    **/
    count<T extends carTypesCountArgs>(
      args?: Subset<T, carTypesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarTypesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarTypesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarTypesAggregateArgs>(args: Subset<T, CarTypesAggregateArgs>): Prisma.PrismaPromise<GetCarTypesAggregateType<T>>

    /**
     * Group by CarTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carTypesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends carTypesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: carTypesGroupByArgs['orderBy'] }
        : { orderBy?: carTypesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, carTypesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarTypesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the carTypes model
   */
  readonly fields: carTypesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for carTypes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__carTypesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cars<T extends carTypes$carsArgs<ExtArgs> = {}>(args?: Subset<T, carTypes$carsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the carTypes model
   */ 
  interface carTypesFieldRefs {
    readonly id: FieldRef<"carTypes", 'Int'>
    readonly typeName: FieldRef<"carTypes", 'String'>
    readonly createdAt: FieldRef<"carTypes", 'DateTime'>
    readonly updatedAt: FieldRef<"carTypes", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * carTypes findUnique
   */
  export type carTypesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carTypes
     */
    select?: carTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carTypesInclude<ExtArgs> | null
    /**
     * Filter, which carTypes to fetch.
     */
    where: carTypesWhereUniqueInput
  }


  /**
   * carTypes findUniqueOrThrow
   */
  export type carTypesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carTypes
     */
    select?: carTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carTypesInclude<ExtArgs> | null
    /**
     * Filter, which carTypes to fetch.
     */
    where: carTypesWhereUniqueInput
  }


  /**
   * carTypes findFirst
   */
  export type carTypesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carTypes
     */
    select?: carTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carTypesInclude<ExtArgs> | null
    /**
     * Filter, which carTypes to fetch.
     */
    where?: carTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carTypes to fetch.
     */
    orderBy?: carTypesOrderByWithRelationInput | carTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carTypes.
     */
    cursor?: carTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carTypes.
     */
    distinct?: CarTypesScalarFieldEnum | CarTypesScalarFieldEnum[]
  }


  /**
   * carTypes findFirstOrThrow
   */
  export type carTypesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carTypes
     */
    select?: carTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carTypesInclude<ExtArgs> | null
    /**
     * Filter, which carTypes to fetch.
     */
    where?: carTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carTypes to fetch.
     */
    orderBy?: carTypesOrderByWithRelationInput | carTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carTypes.
     */
    cursor?: carTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carTypes.
     */
    distinct?: CarTypesScalarFieldEnum | CarTypesScalarFieldEnum[]
  }


  /**
   * carTypes findMany
   */
  export type carTypesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carTypes
     */
    select?: carTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carTypesInclude<ExtArgs> | null
    /**
     * Filter, which carTypes to fetch.
     */
    where?: carTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carTypes to fetch.
     */
    orderBy?: carTypesOrderByWithRelationInput | carTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing carTypes.
     */
    cursor?: carTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carTypes.
     */
    skip?: number
    distinct?: CarTypesScalarFieldEnum | CarTypesScalarFieldEnum[]
  }


  /**
   * carTypes create
   */
  export type carTypesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carTypes
     */
    select?: carTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carTypesInclude<ExtArgs> | null
    /**
     * The data needed to create a carTypes.
     */
    data: XOR<carTypesCreateInput, carTypesUncheckedCreateInput>
  }


  /**
   * carTypes createMany
   */
  export type carTypesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many carTypes.
     */
    data: carTypesCreateManyInput | carTypesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * carTypes update
   */
  export type carTypesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carTypes
     */
    select?: carTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carTypesInclude<ExtArgs> | null
    /**
     * The data needed to update a carTypes.
     */
    data: XOR<carTypesUpdateInput, carTypesUncheckedUpdateInput>
    /**
     * Choose, which carTypes to update.
     */
    where: carTypesWhereUniqueInput
  }


  /**
   * carTypes updateMany
   */
  export type carTypesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update carTypes.
     */
    data: XOR<carTypesUpdateManyMutationInput, carTypesUncheckedUpdateManyInput>
    /**
     * Filter which carTypes to update
     */
    where?: carTypesWhereInput
  }


  /**
   * carTypes upsert
   */
  export type carTypesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carTypes
     */
    select?: carTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carTypesInclude<ExtArgs> | null
    /**
     * The filter to search for the carTypes to update in case it exists.
     */
    where: carTypesWhereUniqueInput
    /**
     * In case the carTypes found by the `where` argument doesn't exist, create a new carTypes with this data.
     */
    create: XOR<carTypesCreateInput, carTypesUncheckedCreateInput>
    /**
     * In case the carTypes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<carTypesUpdateInput, carTypesUncheckedUpdateInput>
  }


  /**
   * carTypes delete
   */
  export type carTypesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carTypes
     */
    select?: carTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carTypesInclude<ExtArgs> | null
    /**
     * Filter which carTypes to delete.
     */
    where: carTypesWhereUniqueInput
  }


  /**
   * carTypes deleteMany
   */
  export type carTypesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which carTypes to delete
     */
    where?: carTypesWhereInput
  }


  /**
   * carTypes.cars
   */
  export type carTypes$carsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carsInclude<ExtArgs> | null
    where?: carsWhereInput
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    cursor?: carsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarsScalarFieldEnum | CarsScalarFieldEnum[]
  }


  /**
   * carTypes without action
   */
  export type carTypesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carTypes
     */
    select?: carTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carTypesInclude<ExtArgs> | null
  }



  /**
   * Model carBrands
   */

  export type AggregateCarBrands = {
    _count: CarBrandsCountAggregateOutputType | null
    _avg: CarBrandsAvgAggregateOutputType | null
    _sum: CarBrandsSumAggregateOutputType | null
    _min: CarBrandsMinAggregateOutputType | null
    _max: CarBrandsMaxAggregateOutputType | null
  }

  export type CarBrandsAvgAggregateOutputType = {
    id: number | null
  }

  export type CarBrandsSumAggregateOutputType = {
    id: number | null
  }

  export type CarBrandsMinAggregateOutputType = {
    id: number | null
    BrandName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarBrandsMaxAggregateOutputType = {
    id: number | null
    BrandName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarBrandsCountAggregateOutputType = {
    id: number
    BrandName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CarBrandsAvgAggregateInputType = {
    id?: true
  }

  export type CarBrandsSumAggregateInputType = {
    id?: true
  }

  export type CarBrandsMinAggregateInputType = {
    id?: true
    BrandName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarBrandsMaxAggregateInputType = {
    id?: true
    BrandName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarBrandsCountAggregateInputType = {
    id?: true
    BrandName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CarBrandsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which carBrands to aggregate.
     */
    where?: carBrandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carBrands to fetch.
     */
    orderBy?: carBrandsOrderByWithRelationInput | carBrandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: carBrandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned carBrands
    **/
    _count?: true | CarBrandsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarBrandsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarBrandsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarBrandsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarBrandsMaxAggregateInputType
  }

  export type GetCarBrandsAggregateType<T extends CarBrandsAggregateArgs> = {
        [P in keyof T & keyof AggregateCarBrands]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarBrands[P]>
      : GetScalarType<T[P], AggregateCarBrands[P]>
  }




  export type carBrandsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carBrandsWhereInput
    orderBy?: carBrandsOrderByWithAggregationInput | carBrandsOrderByWithAggregationInput[]
    by: CarBrandsScalarFieldEnum[] | CarBrandsScalarFieldEnum
    having?: carBrandsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarBrandsCountAggregateInputType | true
    _avg?: CarBrandsAvgAggregateInputType
    _sum?: CarBrandsSumAggregateInputType
    _min?: CarBrandsMinAggregateInputType
    _max?: CarBrandsMaxAggregateInputType
  }

  export type CarBrandsGroupByOutputType = {
    id: number
    BrandName: string
    createdAt: Date
    updatedAt: Date | null
    _count: CarBrandsCountAggregateOutputType | null
    _avg: CarBrandsAvgAggregateOutputType | null
    _sum: CarBrandsSumAggregateOutputType | null
    _min: CarBrandsMinAggregateOutputType | null
    _max: CarBrandsMaxAggregateOutputType | null
  }

  type GetCarBrandsGroupByPayload<T extends carBrandsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarBrandsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarBrandsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarBrandsGroupByOutputType[P]>
            : GetScalarType<T[P], CarBrandsGroupByOutputType[P]>
        }
      >
    >


  export type carBrandsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    BrandName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cars?: boolean | carBrands$carsArgs<ExtArgs>
    _count?: boolean | CarBrandsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carBrands"]>

  export type carBrandsSelectScalar = {
    id?: boolean
    BrandName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type carBrandsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | carBrands$carsArgs<ExtArgs>
    _count?: boolean | CarBrandsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $carBrandsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "carBrands"
    objects: {
      cars: Prisma.$carsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      BrandName: string
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["carBrands"]>
    composites: {}
  }


  type carBrandsGetPayload<S extends boolean | null | undefined | carBrandsDefaultArgs> = $Result.GetResult<Prisma.$carBrandsPayload, S>

  type carBrandsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<carBrandsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CarBrandsCountAggregateInputType | true
    }

  export interface carBrandsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['carBrands'], meta: { name: 'carBrands' } }
    /**
     * Find zero or one CarBrands that matches the filter.
     * @param {carBrandsFindUniqueArgs} args - Arguments to find a CarBrands
     * @example
     * // Get one CarBrands
     * const carBrands = await prisma.carBrands.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends carBrandsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, carBrandsFindUniqueArgs<ExtArgs>>
    ): Prisma__carBrandsClient<$Result.GetResult<Prisma.$carBrandsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CarBrands that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {carBrandsFindUniqueOrThrowArgs} args - Arguments to find a CarBrands
     * @example
     * // Get one CarBrands
     * const carBrands = await prisma.carBrands.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends carBrandsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, carBrandsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__carBrandsClient<$Result.GetResult<Prisma.$carBrandsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CarBrands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carBrandsFindFirstArgs} args - Arguments to find a CarBrands
     * @example
     * // Get one CarBrands
     * const carBrands = await prisma.carBrands.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends carBrandsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, carBrandsFindFirstArgs<ExtArgs>>
    ): Prisma__carBrandsClient<$Result.GetResult<Prisma.$carBrandsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CarBrands that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carBrandsFindFirstOrThrowArgs} args - Arguments to find a CarBrands
     * @example
     * // Get one CarBrands
     * const carBrands = await prisma.carBrands.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends carBrandsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, carBrandsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__carBrandsClient<$Result.GetResult<Prisma.$carBrandsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CarBrands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carBrandsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarBrands
     * const carBrands = await prisma.carBrands.findMany()
     * 
     * // Get first 10 CarBrands
     * const carBrands = await prisma.carBrands.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carBrandsWithIdOnly = await prisma.carBrands.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends carBrandsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, carBrandsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carBrandsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CarBrands.
     * @param {carBrandsCreateArgs} args - Arguments to create a CarBrands.
     * @example
     * // Create one CarBrands
     * const CarBrands = await prisma.carBrands.create({
     *   data: {
     *     // ... data to create a CarBrands
     *   }
     * })
     * 
    **/
    create<T extends carBrandsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, carBrandsCreateArgs<ExtArgs>>
    ): Prisma__carBrandsClient<$Result.GetResult<Prisma.$carBrandsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CarBrands.
     *     @param {carBrandsCreateManyArgs} args - Arguments to create many CarBrands.
     *     @example
     *     // Create many CarBrands
     *     const carBrands = await prisma.carBrands.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends carBrandsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, carBrandsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CarBrands.
     * @param {carBrandsDeleteArgs} args - Arguments to delete one CarBrands.
     * @example
     * // Delete one CarBrands
     * const CarBrands = await prisma.carBrands.delete({
     *   where: {
     *     // ... filter to delete one CarBrands
     *   }
     * })
     * 
    **/
    delete<T extends carBrandsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, carBrandsDeleteArgs<ExtArgs>>
    ): Prisma__carBrandsClient<$Result.GetResult<Prisma.$carBrandsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CarBrands.
     * @param {carBrandsUpdateArgs} args - Arguments to update one CarBrands.
     * @example
     * // Update one CarBrands
     * const carBrands = await prisma.carBrands.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends carBrandsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, carBrandsUpdateArgs<ExtArgs>>
    ): Prisma__carBrandsClient<$Result.GetResult<Prisma.$carBrandsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CarBrands.
     * @param {carBrandsDeleteManyArgs} args - Arguments to filter CarBrands to delete.
     * @example
     * // Delete a few CarBrands
     * const { count } = await prisma.carBrands.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends carBrandsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, carBrandsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarBrands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carBrandsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarBrands
     * const carBrands = await prisma.carBrands.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends carBrandsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, carBrandsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CarBrands.
     * @param {carBrandsUpsertArgs} args - Arguments to update or create a CarBrands.
     * @example
     * // Update or create a CarBrands
     * const carBrands = await prisma.carBrands.upsert({
     *   create: {
     *     // ... data to create a CarBrands
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarBrands we want to update
     *   }
     * })
    **/
    upsert<T extends carBrandsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, carBrandsUpsertArgs<ExtArgs>>
    ): Prisma__carBrandsClient<$Result.GetResult<Prisma.$carBrandsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CarBrands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carBrandsCountArgs} args - Arguments to filter CarBrands to count.
     * @example
     * // Count the number of CarBrands
     * const count = await prisma.carBrands.count({
     *   where: {
     *     // ... the filter for the CarBrands we want to count
     *   }
     * })
    **/
    count<T extends carBrandsCountArgs>(
      args?: Subset<T, carBrandsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarBrandsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarBrands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarBrandsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarBrandsAggregateArgs>(args: Subset<T, CarBrandsAggregateArgs>): Prisma.PrismaPromise<GetCarBrandsAggregateType<T>>

    /**
     * Group by CarBrands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carBrandsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends carBrandsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: carBrandsGroupByArgs['orderBy'] }
        : { orderBy?: carBrandsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, carBrandsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarBrandsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the carBrands model
   */
  readonly fields: carBrandsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for carBrands.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__carBrandsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cars<T extends carBrands$carsArgs<ExtArgs> = {}>(args?: Subset<T, carBrands$carsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the carBrands model
   */ 
  interface carBrandsFieldRefs {
    readonly id: FieldRef<"carBrands", 'Int'>
    readonly BrandName: FieldRef<"carBrands", 'String'>
    readonly createdAt: FieldRef<"carBrands", 'DateTime'>
    readonly updatedAt: FieldRef<"carBrands", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * carBrands findUnique
   */
  export type carBrandsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carBrands
     */
    select?: carBrandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carBrandsInclude<ExtArgs> | null
    /**
     * Filter, which carBrands to fetch.
     */
    where: carBrandsWhereUniqueInput
  }


  /**
   * carBrands findUniqueOrThrow
   */
  export type carBrandsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carBrands
     */
    select?: carBrandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carBrandsInclude<ExtArgs> | null
    /**
     * Filter, which carBrands to fetch.
     */
    where: carBrandsWhereUniqueInput
  }


  /**
   * carBrands findFirst
   */
  export type carBrandsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carBrands
     */
    select?: carBrandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carBrandsInclude<ExtArgs> | null
    /**
     * Filter, which carBrands to fetch.
     */
    where?: carBrandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carBrands to fetch.
     */
    orderBy?: carBrandsOrderByWithRelationInput | carBrandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carBrands.
     */
    cursor?: carBrandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carBrands.
     */
    distinct?: CarBrandsScalarFieldEnum | CarBrandsScalarFieldEnum[]
  }


  /**
   * carBrands findFirstOrThrow
   */
  export type carBrandsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carBrands
     */
    select?: carBrandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carBrandsInclude<ExtArgs> | null
    /**
     * Filter, which carBrands to fetch.
     */
    where?: carBrandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carBrands to fetch.
     */
    orderBy?: carBrandsOrderByWithRelationInput | carBrandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carBrands.
     */
    cursor?: carBrandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carBrands.
     */
    distinct?: CarBrandsScalarFieldEnum | CarBrandsScalarFieldEnum[]
  }


  /**
   * carBrands findMany
   */
  export type carBrandsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carBrands
     */
    select?: carBrandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carBrandsInclude<ExtArgs> | null
    /**
     * Filter, which carBrands to fetch.
     */
    where?: carBrandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carBrands to fetch.
     */
    orderBy?: carBrandsOrderByWithRelationInput | carBrandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing carBrands.
     */
    cursor?: carBrandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carBrands.
     */
    skip?: number
    distinct?: CarBrandsScalarFieldEnum | CarBrandsScalarFieldEnum[]
  }


  /**
   * carBrands create
   */
  export type carBrandsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carBrands
     */
    select?: carBrandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carBrandsInclude<ExtArgs> | null
    /**
     * The data needed to create a carBrands.
     */
    data: XOR<carBrandsCreateInput, carBrandsUncheckedCreateInput>
  }


  /**
   * carBrands createMany
   */
  export type carBrandsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many carBrands.
     */
    data: carBrandsCreateManyInput | carBrandsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * carBrands update
   */
  export type carBrandsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carBrands
     */
    select?: carBrandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carBrandsInclude<ExtArgs> | null
    /**
     * The data needed to update a carBrands.
     */
    data: XOR<carBrandsUpdateInput, carBrandsUncheckedUpdateInput>
    /**
     * Choose, which carBrands to update.
     */
    where: carBrandsWhereUniqueInput
  }


  /**
   * carBrands updateMany
   */
  export type carBrandsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update carBrands.
     */
    data: XOR<carBrandsUpdateManyMutationInput, carBrandsUncheckedUpdateManyInput>
    /**
     * Filter which carBrands to update
     */
    where?: carBrandsWhereInput
  }


  /**
   * carBrands upsert
   */
  export type carBrandsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carBrands
     */
    select?: carBrandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carBrandsInclude<ExtArgs> | null
    /**
     * The filter to search for the carBrands to update in case it exists.
     */
    where: carBrandsWhereUniqueInput
    /**
     * In case the carBrands found by the `where` argument doesn't exist, create a new carBrands with this data.
     */
    create: XOR<carBrandsCreateInput, carBrandsUncheckedCreateInput>
    /**
     * In case the carBrands was found with the provided `where` argument, update it with this data.
     */
    update: XOR<carBrandsUpdateInput, carBrandsUncheckedUpdateInput>
  }


  /**
   * carBrands delete
   */
  export type carBrandsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carBrands
     */
    select?: carBrandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carBrandsInclude<ExtArgs> | null
    /**
     * Filter which carBrands to delete.
     */
    where: carBrandsWhereUniqueInput
  }


  /**
   * carBrands deleteMany
   */
  export type carBrandsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which carBrands to delete
     */
    where?: carBrandsWhereInput
  }


  /**
   * carBrands.cars
   */
  export type carBrands$carsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carsInclude<ExtArgs> | null
    where?: carsWhereInput
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    cursor?: carsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarsScalarFieldEnum | CarsScalarFieldEnum[]
  }


  /**
   * carBrands without action
   */
  export type carBrandsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carBrands
     */
    select?: carBrandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carBrandsInclude<ExtArgs> | null
  }



  /**
   * Model cars
   */

  export type AggregateCars = {
    _count: CarsCountAggregateOutputType | null
    _avg: CarsAvgAggregateOutputType | null
    _sum: CarsSumAggregateOutputType | null
    _min: CarsMinAggregateOutputType | null
    _max: CarsMaxAggregateOutputType | null
  }

  export type CarsAvgAggregateOutputType = {
    id: number | null
    brandId: number | null
    typeId: number | null
    year: number | null
    pricePerMinute: number | null
    engineCapacity: number | null
  }

  export type CarsSumAggregateOutputType = {
    id: number | null
    brandId: number | null
    typeId: number | null
    year: number | null
    pricePerMinute: number | null
    engineCapacity: number | null
  }

  export type CarsMinAggregateOutputType = {
    id: number | null
    brandId: number | null
    typeId: number | null
    model: string | null
    year: number | null
    registration: string | null
    pricePerMinute: number | null
    engineCapacity: number | null
    available: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarsMaxAggregateOutputType = {
    id: number | null
    brandId: number | null
    typeId: number | null
    model: string | null
    year: number | null
    registration: string | null
    pricePerMinute: number | null
    engineCapacity: number | null
    available: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarsCountAggregateOutputType = {
    id: number
    brandId: number
    typeId: number
    model: number
    year: number
    registration: number
    pricePerMinute: number
    engineCapacity: number
    available: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CarsAvgAggregateInputType = {
    id?: true
    brandId?: true
    typeId?: true
    year?: true
    pricePerMinute?: true
    engineCapacity?: true
  }

  export type CarsSumAggregateInputType = {
    id?: true
    brandId?: true
    typeId?: true
    year?: true
    pricePerMinute?: true
    engineCapacity?: true
  }

  export type CarsMinAggregateInputType = {
    id?: true
    brandId?: true
    typeId?: true
    model?: true
    year?: true
    registration?: true
    pricePerMinute?: true
    engineCapacity?: true
    available?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarsMaxAggregateInputType = {
    id?: true
    brandId?: true
    typeId?: true
    model?: true
    year?: true
    registration?: true
    pricePerMinute?: true
    engineCapacity?: true
    available?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarsCountAggregateInputType = {
    id?: true
    brandId?: true
    typeId?: true
    model?: true
    year?: true
    registration?: true
    pricePerMinute?: true
    engineCapacity?: true
    available?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CarsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cars to aggregate.
     */
    where?: carsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cars to fetch.
     */
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: carsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cars
    **/
    _count?: true | CarsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarsMaxAggregateInputType
  }

  export type GetCarsAggregateType<T extends CarsAggregateArgs> = {
        [P in keyof T & keyof AggregateCars]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCars[P]>
      : GetScalarType<T[P], AggregateCars[P]>
  }




  export type carsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carsWhereInput
    orderBy?: carsOrderByWithAggregationInput | carsOrderByWithAggregationInput[]
    by: CarsScalarFieldEnum[] | CarsScalarFieldEnum
    having?: carsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarsCountAggregateInputType | true
    _avg?: CarsAvgAggregateInputType
    _sum?: CarsSumAggregateInputType
    _min?: CarsMinAggregateInputType
    _max?: CarsMaxAggregateInputType
  }

  export type CarsGroupByOutputType = {
    id: number
    brandId: number
    typeId: number
    model: string
    year: number
    registration: string | null
    pricePerMinute: number
    engineCapacity: number
    available: boolean
    createdAt: Date
    updatedAt: Date | null
    _count: CarsCountAggregateOutputType | null
    _avg: CarsAvgAggregateOutputType | null
    _sum: CarsSumAggregateOutputType | null
    _min: CarsMinAggregateOutputType | null
    _max: CarsMaxAggregateOutputType | null
  }

  type GetCarsGroupByPayload<T extends carsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarsGroupByOutputType[P]>
            : GetScalarType<T[P], CarsGroupByOutputType[P]>
        }
      >
    >


  export type carsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    brandId?: boolean
    typeId?: boolean
    model?: boolean
    year?: boolean
    registration?: boolean
    pricePerMinute?: boolean
    engineCapacity?: boolean
    available?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookings?: boolean | cars$bookingsArgs<ExtArgs>
    brand?: boolean | carBrandsDefaultArgs<ExtArgs>
    type?: boolean | carTypesDefaultArgs<ExtArgs>
    _count?: boolean | CarsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cars"]>

  export type carsSelectScalar = {
    id?: boolean
    brandId?: boolean
    typeId?: boolean
    model?: boolean
    year?: boolean
    registration?: boolean
    pricePerMinute?: boolean
    engineCapacity?: boolean
    available?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type carsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | cars$bookingsArgs<ExtArgs>
    brand?: boolean | carBrandsDefaultArgs<ExtArgs>
    type?: boolean | carTypesDefaultArgs<ExtArgs>
    _count?: boolean | CarsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $carsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cars"
    objects: {
      bookings: Prisma.$bookingsPayload<ExtArgs>[]
      brand: Prisma.$carBrandsPayload<ExtArgs>
      type: Prisma.$carTypesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      brandId: number
      typeId: number
      model: string
      year: number
      registration: string | null
      pricePerMinute: number
      engineCapacity: number
      available: boolean
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["cars"]>
    composites: {}
  }


  type carsGetPayload<S extends boolean | null | undefined | carsDefaultArgs> = $Result.GetResult<Prisma.$carsPayload, S>

  type carsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<carsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CarsCountAggregateInputType | true
    }

  export interface carsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cars'], meta: { name: 'cars' } }
    /**
     * Find zero or one Cars that matches the filter.
     * @param {carsFindUniqueArgs} args - Arguments to find a Cars
     * @example
     * // Get one Cars
     * const cars = await prisma.cars.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends carsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, carsFindUniqueArgs<ExtArgs>>
    ): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cars that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {carsFindUniqueOrThrowArgs} args - Arguments to find a Cars
     * @example
     * // Get one Cars
     * const cars = await prisma.cars.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends carsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, carsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carsFindFirstArgs} args - Arguments to find a Cars
     * @example
     * // Get one Cars
     * const cars = await prisma.cars.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends carsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, carsFindFirstArgs<ExtArgs>>
    ): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cars that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carsFindFirstOrThrowArgs} args - Arguments to find a Cars
     * @example
     * // Get one Cars
     * const cars = await prisma.cars.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends carsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, carsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cars
     * const cars = await prisma.cars.findMany()
     * 
     * // Get first 10 Cars
     * const cars = await prisma.cars.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carsWithIdOnly = await prisma.cars.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends carsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, carsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cars.
     * @param {carsCreateArgs} args - Arguments to create a Cars.
     * @example
     * // Create one Cars
     * const Cars = await prisma.cars.create({
     *   data: {
     *     // ... data to create a Cars
     *   }
     * })
     * 
    **/
    create<T extends carsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, carsCreateArgs<ExtArgs>>
    ): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cars.
     *     @param {carsCreateManyArgs} args - Arguments to create many Cars.
     *     @example
     *     // Create many Cars
     *     const cars = await prisma.cars.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends carsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, carsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cars.
     * @param {carsDeleteArgs} args - Arguments to delete one Cars.
     * @example
     * // Delete one Cars
     * const Cars = await prisma.cars.delete({
     *   where: {
     *     // ... filter to delete one Cars
     *   }
     * })
     * 
    **/
    delete<T extends carsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, carsDeleteArgs<ExtArgs>>
    ): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cars.
     * @param {carsUpdateArgs} args - Arguments to update one Cars.
     * @example
     * // Update one Cars
     * const cars = await prisma.cars.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends carsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, carsUpdateArgs<ExtArgs>>
    ): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cars.
     * @param {carsDeleteManyArgs} args - Arguments to filter Cars to delete.
     * @example
     * // Delete a few Cars
     * const { count } = await prisma.cars.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends carsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, carsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cars
     * const cars = await prisma.cars.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends carsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, carsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cars.
     * @param {carsUpsertArgs} args - Arguments to update or create a Cars.
     * @example
     * // Update or create a Cars
     * const cars = await prisma.cars.upsert({
     *   create: {
     *     // ... data to create a Cars
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cars we want to update
     *   }
     * })
    **/
    upsert<T extends carsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, carsUpsertArgs<ExtArgs>>
    ): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carsCountArgs} args - Arguments to filter Cars to count.
     * @example
     * // Count the number of Cars
     * const count = await prisma.cars.count({
     *   where: {
     *     // ... the filter for the Cars we want to count
     *   }
     * })
    **/
    count<T extends carsCountArgs>(
      args?: Subset<T, carsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarsAggregateArgs>(args: Subset<T, CarsAggregateArgs>): Prisma.PrismaPromise<GetCarsAggregateType<T>>

    /**
     * Group by Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends carsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: carsGroupByArgs['orderBy'] }
        : { orderBy?: carsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, carsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cars model
   */
  readonly fields: carsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cars.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__carsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    bookings<T extends cars$bookingsArgs<ExtArgs> = {}>(args?: Subset<T, cars$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bookingsPayload<ExtArgs>, T, 'findMany'> | Null>;

    brand<T extends carBrandsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, carBrandsDefaultArgs<ExtArgs>>): Prisma__carBrandsClient<$Result.GetResult<Prisma.$carBrandsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    type<T extends carTypesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, carTypesDefaultArgs<ExtArgs>>): Prisma__carTypesClient<$Result.GetResult<Prisma.$carTypesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the cars model
   */ 
  interface carsFieldRefs {
    readonly id: FieldRef<"cars", 'Int'>
    readonly brandId: FieldRef<"cars", 'Int'>
    readonly typeId: FieldRef<"cars", 'Int'>
    readonly model: FieldRef<"cars", 'String'>
    readonly year: FieldRef<"cars", 'Int'>
    readonly registration: FieldRef<"cars", 'String'>
    readonly pricePerMinute: FieldRef<"cars", 'Float'>
    readonly engineCapacity: FieldRef<"cars", 'Float'>
    readonly available: FieldRef<"cars", 'Boolean'>
    readonly createdAt: FieldRef<"cars", 'DateTime'>
    readonly updatedAt: FieldRef<"cars", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * cars findUnique
   */
  export type carsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * Filter, which cars to fetch.
     */
    where: carsWhereUniqueInput
  }


  /**
   * cars findUniqueOrThrow
   */
  export type carsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * Filter, which cars to fetch.
     */
    where: carsWhereUniqueInput
  }


  /**
   * cars findFirst
   */
  export type carsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * Filter, which cars to fetch.
     */
    where?: carsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cars to fetch.
     */
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cars.
     */
    cursor?: carsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cars.
     */
    distinct?: CarsScalarFieldEnum | CarsScalarFieldEnum[]
  }


  /**
   * cars findFirstOrThrow
   */
  export type carsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * Filter, which cars to fetch.
     */
    where?: carsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cars to fetch.
     */
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cars.
     */
    cursor?: carsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cars.
     */
    distinct?: CarsScalarFieldEnum | CarsScalarFieldEnum[]
  }


  /**
   * cars findMany
   */
  export type carsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * Filter, which cars to fetch.
     */
    where?: carsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cars to fetch.
     */
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cars.
     */
    cursor?: carsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cars.
     */
    skip?: number
    distinct?: CarsScalarFieldEnum | CarsScalarFieldEnum[]
  }


  /**
   * cars create
   */
  export type carsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * The data needed to create a cars.
     */
    data: XOR<carsCreateInput, carsUncheckedCreateInput>
  }


  /**
   * cars createMany
   */
  export type carsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cars.
     */
    data: carsCreateManyInput | carsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * cars update
   */
  export type carsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * The data needed to update a cars.
     */
    data: XOR<carsUpdateInput, carsUncheckedUpdateInput>
    /**
     * Choose, which cars to update.
     */
    where: carsWhereUniqueInput
  }


  /**
   * cars updateMany
   */
  export type carsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cars.
     */
    data: XOR<carsUpdateManyMutationInput, carsUncheckedUpdateManyInput>
    /**
     * Filter which cars to update
     */
    where?: carsWhereInput
  }


  /**
   * cars upsert
   */
  export type carsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * The filter to search for the cars to update in case it exists.
     */
    where: carsWhereUniqueInput
    /**
     * In case the cars found by the `where` argument doesn't exist, create a new cars with this data.
     */
    create: XOR<carsCreateInput, carsUncheckedCreateInput>
    /**
     * In case the cars was found with the provided `where` argument, update it with this data.
     */
    update: XOR<carsUpdateInput, carsUncheckedUpdateInput>
  }


  /**
   * cars delete
   */
  export type carsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * Filter which cars to delete.
     */
    where: carsWhereUniqueInput
  }


  /**
   * cars deleteMany
   */
  export type carsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cars to delete
     */
    where?: carsWhereInput
  }


  /**
   * cars.bookings
   */
  export type cars$bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookings
     */
    select?: bookingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingsInclude<ExtArgs> | null
    where?: bookingsWhereInput
    orderBy?: bookingsOrderByWithRelationInput | bookingsOrderByWithRelationInput[]
    cursor?: bookingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingsScalarFieldEnum | BookingsScalarFieldEnum[]
  }


  /**
   * cars without action
   */
  export type carsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carsInclude<ExtArgs> | null
  }



  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    fullName: string | null
    isAdmin: boolean | null
    updatedAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    fullName: string | null
    isAdmin: boolean | null
    updatedAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    createdAt: number
    fullName: number
    isAdmin: number
    updatedAt: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    createdAt?: true
    fullName?: true
    isAdmin?: true
    updatedAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    createdAt?: true
    fullName?: true
    isAdmin?: true
    updatedAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    createdAt?: true
    fullName?: true
    isAdmin?: true
    updatedAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    username: string
    email: string
    password: string
    createdAt: Date
    fullName: string | null
    isAdmin: boolean
    updatedAt: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    fullName?: boolean
    isAdmin?: boolean
    updatedAt?: boolean
    bookings?: boolean | users$bookingsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    fullName?: boolean
    isAdmin?: boolean
    updatedAt?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | users$bookingsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      bookings: Prisma.$bookingsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      email: string
      password: string
      createdAt: Date
      fullName: string | null
      isAdmin: boolean
      updatedAt: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    bookings<T extends users$bookingsArgs<ExtArgs> = {}>(args?: Subset<T, users$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bookingsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly username: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly createdAt: FieldRef<"users", 'DateTime'>
    readonly fullName: FieldRef<"users", 'String'>
    readonly isAdmin: FieldRef<"users", 'Boolean'>
    readonly updatedAt: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.bookings
   */
  export type users$bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookings
     */
    select?: bookingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingsInclude<ExtArgs> | null
    where?: bookingsWhereInput
    orderBy?: bookingsOrderByWithRelationInput | bookingsOrderByWithRelationInput[]
    cursor?: bookingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingsScalarFieldEnum | BookingsScalarFieldEnum[]
  }


  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BookingsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    carId: 'carId',
    startTime: 'startTime',
    endTime: 'endTime',
    duration: 'duration',
    status: 'status',
    bookedPrice: 'bookedPrice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookingsScalarFieldEnum = (typeof BookingsScalarFieldEnum)[keyof typeof BookingsScalarFieldEnum]


  export const CarTypesScalarFieldEnum: {
    id: 'id',
    typeName: 'typeName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CarTypesScalarFieldEnum = (typeof CarTypesScalarFieldEnum)[keyof typeof CarTypesScalarFieldEnum]


  export const CarBrandsScalarFieldEnum: {
    id: 'id',
    BrandName: 'BrandName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CarBrandsScalarFieldEnum = (typeof CarBrandsScalarFieldEnum)[keyof typeof CarBrandsScalarFieldEnum]


  export const CarsScalarFieldEnum: {
    id: 'id',
    brandId: 'brandId',
    typeId: 'typeId',
    model: 'model',
    year: 'year',
    registration: 'registration',
    pricePerMinute: 'pricePerMinute',
    engineCapacity: 'engineCapacity',
    available: 'available',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CarsScalarFieldEnum = (typeof CarsScalarFieldEnum)[keyof typeof CarsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    fullName: 'fullName',
    isAdmin: 'isAdmin',
    updatedAt: 'updatedAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type bookingsWhereInput = {
    AND?: bookingsWhereInput | bookingsWhereInput[]
    OR?: bookingsWhereInput[]
    NOT?: bookingsWhereInput | bookingsWhereInput[]
    id?: IntFilter<"bookings"> | number
    userId?: IntFilter<"bookings"> | number
    carId?: IntFilter<"bookings"> | number
    startTime?: DateTimeFilter<"bookings"> | Date | string
    endTime?: DateTimeFilter<"bookings"> | Date | string
    duration?: IntFilter<"bookings"> | number
    status?: StringFilter<"bookings"> | string
    bookedPrice?: FloatFilter<"bookings"> | number
    createdAt?: DateTimeFilter<"bookings"> | Date | string
    updatedAt?: DateTimeNullableFilter<"bookings"> | Date | string | null
    cars?: XOR<CarsRelationFilter, carsWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type bookingsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    carId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    bookedPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    cars?: carsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type bookingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: bookingsWhereInput | bookingsWhereInput[]
    OR?: bookingsWhereInput[]
    NOT?: bookingsWhereInput | bookingsWhereInput[]
    userId?: IntFilter<"bookings"> | number
    carId?: IntFilter<"bookings"> | number
    startTime?: DateTimeFilter<"bookings"> | Date | string
    endTime?: DateTimeFilter<"bookings"> | Date | string
    duration?: IntFilter<"bookings"> | number
    status?: StringFilter<"bookings"> | string
    bookedPrice?: FloatFilter<"bookings"> | number
    createdAt?: DateTimeFilter<"bookings"> | Date | string
    updatedAt?: DateTimeNullableFilter<"bookings"> | Date | string | null
    cars?: XOR<CarsRelationFilter, carsWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }, "id">

  export type bookingsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    carId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    bookedPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: bookingsCountOrderByAggregateInput
    _avg?: bookingsAvgOrderByAggregateInput
    _max?: bookingsMaxOrderByAggregateInput
    _min?: bookingsMinOrderByAggregateInput
    _sum?: bookingsSumOrderByAggregateInput
  }

  export type bookingsScalarWhereWithAggregatesInput = {
    AND?: bookingsScalarWhereWithAggregatesInput | bookingsScalarWhereWithAggregatesInput[]
    OR?: bookingsScalarWhereWithAggregatesInput[]
    NOT?: bookingsScalarWhereWithAggregatesInput | bookingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"bookings"> | number
    userId?: IntWithAggregatesFilter<"bookings"> | number
    carId?: IntWithAggregatesFilter<"bookings"> | number
    startTime?: DateTimeWithAggregatesFilter<"bookings"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"bookings"> | Date | string
    duration?: IntWithAggregatesFilter<"bookings"> | number
    status?: StringWithAggregatesFilter<"bookings"> | string
    bookedPrice?: FloatWithAggregatesFilter<"bookings"> | number
    createdAt?: DateTimeWithAggregatesFilter<"bookings"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"bookings"> | Date | string | null
  }

  export type carTypesWhereInput = {
    AND?: carTypesWhereInput | carTypesWhereInput[]
    OR?: carTypesWhereInput[]
    NOT?: carTypesWhereInput | carTypesWhereInput[]
    id?: IntFilter<"carTypes"> | number
    typeName?: StringFilter<"carTypes"> | string
    createdAt?: DateTimeFilter<"carTypes"> | Date | string
    updatedAt?: DateTimeNullableFilter<"carTypes"> | Date | string | null
    cars?: CarsListRelationFilter
  }

  export type carTypesOrderByWithRelationInput = {
    id?: SortOrder
    typeName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    cars?: carsOrderByRelationAggregateInput
  }

  export type carTypesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    typeName?: string
    AND?: carTypesWhereInput | carTypesWhereInput[]
    OR?: carTypesWhereInput[]
    NOT?: carTypesWhereInput | carTypesWhereInput[]
    createdAt?: DateTimeFilter<"carTypes"> | Date | string
    updatedAt?: DateTimeNullableFilter<"carTypes"> | Date | string | null
    cars?: CarsListRelationFilter
  }, "id" | "typeName">

  export type carTypesOrderByWithAggregationInput = {
    id?: SortOrder
    typeName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: carTypesCountOrderByAggregateInput
    _avg?: carTypesAvgOrderByAggregateInput
    _max?: carTypesMaxOrderByAggregateInput
    _min?: carTypesMinOrderByAggregateInput
    _sum?: carTypesSumOrderByAggregateInput
  }

  export type carTypesScalarWhereWithAggregatesInput = {
    AND?: carTypesScalarWhereWithAggregatesInput | carTypesScalarWhereWithAggregatesInput[]
    OR?: carTypesScalarWhereWithAggregatesInput[]
    NOT?: carTypesScalarWhereWithAggregatesInput | carTypesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"carTypes"> | number
    typeName?: StringWithAggregatesFilter<"carTypes"> | string
    createdAt?: DateTimeWithAggregatesFilter<"carTypes"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"carTypes"> | Date | string | null
  }

  export type carBrandsWhereInput = {
    AND?: carBrandsWhereInput | carBrandsWhereInput[]
    OR?: carBrandsWhereInput[]
    NOT?: carBrandsWhereInput | carBrandsWhereInput[]
    id?: IntFilter<"carBrands"> | number
    BrandName?: StringFilter<"carBrands"> | string
    createdAt?: DateTimeFilter<"carBrands"> | Date | string
    updatedAt?: DateTimeNullableFilter<"carBrands"> | Date | string | null
    cars?: CarsListRelationFilter
  }

  export type carBrandsOrderByWithRelationInput = {
    id?: SortOrder
    BrandName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    cars?: carsOrderByRelationAggregateInput
  }

  export type carBrandsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    BrandName?: string
    AND?: carBrandsWhereInput | carBrandsWhereInput[]
    OR?: carBrandsWhereInput[]
    NOT?: carBrandsWhereInput | carBrandsWhereInput[]
    createdAt?: DateTimeFilter<"carBrands"> | Date | string
    updatedAt?: DateTimeNullableFilter<"carBrands"> | Date | string | null
    cars?: CarsListRelationFilter
  }, "id" | "BrandName">

  export type carBrandsOrderByWithAggregationInput = {
    id?: SortOrder
    BrandName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: carBrandsCountOrderByAggregateInput
    _avg?: carBrandsAvgOrderByAggregateInput
    _max?: carBrandsMaxOrderByAggregateInput
    _min?: carBrandsMinOrderByAggregateInput
    _sum?: carBrandsSumOrderByAggregateInput
  }

  export type carBrandsScalarWhereWithAggregatesInput = {
    AND?: carBrandsScalarWhereWithAggregatesInput | carBrandsScalarWhereWithAggregatesInput[]
    OR?: carBrandsScalarWhereWithAggregatesInput[]
    NOT?: carBrandsScalarWhereWithAggregatesInput | carBrandsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"carBrands"> | number
    BrandName?: StringWithAggregatesFilter<"carBrands"> | string
    createdAt?: DateTimeWithAggregatesFilter<"carBrands"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"carBrands"> | Date | string | null
  }

  export type carsWhereInput = {
    AND?: carsWhereInput | carsWhereInput[]
    OR?: carsWhereInput[]
    NOT?: carsWhereInput | carsWhereInput[]
    id?: IntFilter<"cars"> | number
    brandId?: IntFilter<"cars"> | number
    typeId?: IntFilter<"cars"> | number
    model?: StringFilter<"cars"> | string
    year?: IntFilter<"cars"> | number
    registration?: StringNullableFilter<"cars"> | string | null
    pricePerMinute?: FloatFilter<"cars"> | number
    engineCapacity?: FloatFilter<"cars"> | number
    available?: BoolFilter<"cars"> | boolean
    createdAt?: DateTimeFilter<"cars"> | Date | string
    updatedAt?: DateTimeNullableFilter<"cars"> | Date | string | null
    bookings?: BookingsListRelationFilter
    brand?: XOR<CarBrandsRelationFilter, carBrandsWhereInput>
    type?: XOR<CarTypesRelationFilter, carTypesWhereInput>
  }

  export type carsOrderByWithRelationInput = {
    id?: SortOrder
    brandId?: SortOrder
    typeId?: SortOrder
    model?: SortOrder
    year?: SortOrder
    registration?: SortOrderInput | SortOrder
    pricePerMinute?: SortOrder
    engineCapacity?: SortOrder
    available?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    bookings?: bookingsOrderByRelationAggregateInput
    brand?: carBrandsOrderByWithRelationInput
    type?: carTypesOrderByWithRelationInput
  }

  export type carsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    registration?: string
    AND?: carsWhereInput | carsWhereInput[]
    OR?: carsWhereInput[]
    NOT?: carsWhereInput | carsWhereInput[]
    brandId?: IntFilter<"cars"> | number
    typeId?: IntFilter<"cars"> | number
    model?: StringFilter<"cars"> | string
    year?: IntFilter<"cars"> | number
    pricePerMinute?: FloatFilter<"cars"> | number
    engineCapacity?: FloatFilter<"cars"> | number
    available?: BoolFilter<"cars"> | boolean
    createdAt?: DateTimeFilter<"cars"> | Date | string
    updatedAt?: DateTimeNullableFilter<"cars"> | Date | string | null
    bookings?: BookingsListRelationFilter
    brand?: XOR<CarBrandsRelationFilter, carBrandsWhereInput>
    type?: XOR<CarTypesRelationFilter, carTypesWhereInput>
  }, "id" | "registration">

  export type carsOrderByWithAggregationInput = {
    id?: SortOrder
    brandId?: SortOrder
    typeId?: SortOrder
    model?: SortOrder
    year?: SortOrder
    registration?: SortOrderInput | SortOrder
    pricePerMinute?: SortOrder
    engineCapacity?: SortOrder
    available?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: carsCountOrderByAggregateInput
    _avg?: carsAvgOrderByAggregateInput
    _max?: carsMaxOrderByAggregateInput
    _min?: carsMinOrderByAggregateInput
    _sum?: carsSumOrderByAggregateInput
  }

  export type carsScalarWhereWithAggregatesInput = {
    AND?: carsScalarWhereWithAggregatesInput | carsScalarWhereWithAggregatesInput[]
    OR?: carsScalarWhereWithAggregatesInput[]
    NOT?: carsScalarWhereWithAggregatesInput | carsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"cars"> | number
    brandId?: IntWithAggregatesFilter<"cars"> | number
    typeId?: IntWithAggregatesFilter<"cars"> | number
    model?: StringWithAggregatesFilter<"cars"> | string
    year?: IntWithAggregatesFilter<"cars"> | number
    registration?: StringNullableWithAggregatesFilter<"cars"> | string | null
    pricePerMinute?: FloatWithAggregatesFilter<"cars"> | number
    engineCapacity?: FloatWithAggregatesFilter<"cars"> | number
    available?: BoolWithAggregatesFilter<"cars"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"cars"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"cars"> | Date | string | null
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    createdAt?: DateTimeFilter<"users"> | Date | string
    fullName?: StringNullableFilter<"users"> | string | null
    isAdmin?: BoolFilter<"users"> | boolean
    updatedAt?: DateTimeNullableFilter<"users"> | Date | string | null
    bookings?: BookingsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    fullName?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    bookings?: bookingsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    username?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    createdAt?: DateTimeFilter<"users"> | Date | string
    fullName?: StringNullableFilter<"users"> | string | null
    isAdmin?: BoolFilter<"users"> | boolean
    updatedAt?: DateTimeNullableFilter<"users"> | Date | string | null
    bookings?: BookingsListRelationFilter
  }, "id">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    fullName?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    username?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    createdAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    fullName?: StringNullableWithAggregatesFilter<"users"> | string | null
    isAdmin?: BoolWithAggregatesFilter<"users"> | boolean
    updatedAt?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
  }

  export type bookingsCreateInput = {
    startTime: Date | string
    endTime: Date | string
    duration: number
    status?: string
    bookedPrice?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    cars: carsCreateNestedOneWithoutBookingsInput
    users: usersCreateNestedOneWithoutBookingsInput
  }

  export type bookingsUncheckedCreateInput = {
    id?: number
    userId: number
    carId: number
    startTime: Date | string
    endTime: Date | string
    duration: number
    status?: string
    bookedPrice?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type bookingsUpdateInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    bookedPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cars?: carsUpdateOneRequiredWithoutBookingsNestedInput
    users?: usersUpdateOneRequiredWithoutBookingsNestedInput
  }

  export type bookingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    bookedPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bookingsCreateManyInput = {
    id?: number
    userId: number
    carId: number
    startTime: Date | string
    endTime: Date | string
    duration: number
    status?: string
    bookedPrice?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type bookingsUpdateManyMutationInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    bookedPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bookingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    bookedPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type carTypesCreateInput = {
    typeName: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    cars?: carsCreateNestedManyWithoutTypeInput
  }

  export type carTypesUncheckedCreateInput = {
    id?: number
    typeName: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    cars?: carsUncheckedCreateNestedManyWithoutTypeInput
  }

  export type carTypesUpdateInput = {
    typeName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cars?: carsUpdateManyWithoutTypeNestedInput
  }

  export type carTypesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cars?: carsUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type carTypesCreateManyInput = {
    id?: number
    typeName: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type carTypesUpdateManyMutationInput = {
    typeName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type carTypesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type carBrandsCreateInput = {
    BrandName: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    cars?: carsCreateNestedManyWithoutBrandInput
  }

  export type carBrandsUncheckedCreateInput = {
    id?: number
    BrandName: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    cars?: carsUncheckedCreateNestedManyWithoutBrandInput
  }

  export type carBrandsUpdateInput = {
    BrandName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cars?: carsUpdateManyWithoutBrandNestedInput
  }

  export type carBrandsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    BrandName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cars?: carsUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type carBrandsCreateManyInput = {
    id?: number
    BrandName: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type carBrandsUpdateManyMutationInput = {
    BrandName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type carBrandsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    BrandName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type carsCreateInput = {
    model: string
    year: number
    registration?: string | null
    pricePerMinute: number
    engineCapacity: number
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    bookings?: bookingsCreateNestedManyWithoutCarsInput
    brand: carBrandsCreateNestedOneWithoutCarsInput
    type: carTypesCreateNestedOneWithoutCarsInput
  }

  export type carsUncheckedCreateInput = {
    id?: number
    brandId: number
    typeId: number
    model: string
    year: number
    registration?: string | null
    pricePerMinute: number
    engineCapacity: number
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    bookings?: bookingsUncheckedCreateNestedManyWithoutCarsInput
  }

  export type carsUpdateInput = {
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    registration?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerMinute?: FloatFieldUpdateOperationsInput | number
    engineCapacity?: FloatFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookings?: bookingsUpdateManyWithoutCarsNestedInput
    brand?: carBrandsUpdateOneRequiredWithoutCarsNestedInput
    type?: carTypesUpdateOneRequiredWithoutCarsNestedInput
  }

  export type carsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    brandId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    registration?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerMinute?: FloatFieldUpdateOperationsInput | number
    engineCapacity?: FloatFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookings?: bookingsUncheckedUpdateManyWithoutCarsNestedInput
  }

  export type carsCreateManyInput = {
    id?: number
    brandId: number
    typeId: number
    model: string
    year: number
    registration?: string | null
    pricePerMinute: number
    engineCapacity: number
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type carsUpdateManyMutationInput = {
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    registration?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerMinute?: FloatFieldUpdateOperationsInput | number
    engineCapacity?: FloatFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type carsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    brandId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    registration?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerMinute?: FloatFieldUpdateOperationsInput | number
    engineCapacity?: FloatFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersCreateInput = {
    username: string
    email: string
    password: string
    createdAt?: Date | string
    fullName?: string | null
    isAdmin?: boolean
    updatedAt?: Date | string | null
    bookings?: bookingsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    password: string
    createdAt?: Date | string
    fullName?: string | null
    isAdmin?: boolean
    updatedAt?: Date | string | null
    bookings?: bookingsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookings?: bookingsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookings?: bookingsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    username: string
    email: string
    password: string
    createdAt?: Date | string
    fullName?: string | null
    isAdmin?: boolean
    updatedAt?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CarsRelationFilter = {
    is?: carsWhereInput
    isNot?: carsWhereInput
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type bookingsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    carId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    bookedPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type bookingsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    carId?: SortOrder
    duration?: SortOrder
    bookedPrice?: SortOrder
  }

  export type bookingsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    carId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    bookedPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type bookingsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    carId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    bookedPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type bookingsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    carId?: SortOrder
    duration?: SortOrder
    bookedPrice?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CarsListRelationFilter = {
    every?: carsWhereInput
    some?: carsWhereInput
    none?: carsWhereInput
  }

  export type carsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type carTypesCountOrderByAggregateInput = {
    id?: SortOrder
    typeName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type carTypesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type carTypesMaxOrderByAggregateInput = {
    id?: SortOrder
    typeName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type carTypesMinOrderByAggregateInput = {
    id?: SortOrder
    typeName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type carTypesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type carBrandsCountOrderByAggregateInput = {
    id?: SortOrder
    BrandName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type carBrandsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type carBrandsMaxOrderByAggregateInput = {
    id?: SortOrder
    BrandName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type carBrandsMinOrderByAggregateInput = {
    id?: SortOrder
    BrandName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type carBrandsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BookingsListRelationFilter = {
    every?: bookingsWhereInput
    some?: bookingsWhereInput
    none?: bookingsWhereInput
  }

  export type CarBrandsRelationFilter = {
    is?: carBrandsWhereInput
    isNot?: carBrandsWhereInput
  }

  export type CarTypesRelationFilter = {
    is?: carTypesWhereInput
    isNot?: carTypesWhereInput
  }

  export type bookingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type carsCountOrderByAggregateInput = {
    id?: SortOrder
    brandId?: SortOrder
    typeId?: SortOrder
    model?: SortOrder
    year?: SortOrder
    registration?: SortOrder
    pricePerMinute?: SortOrder
    engineCapacity?: SortOrder
    available?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type carsAvgOrderByAggregateInput = {
    id?: SortOrder
    brandId?: SortOrder
    typeId?: SortOrder
    year?: SortOrder
    pricePerMinute?: SortOrder
    engineCapacity?: SortOrder
  }

  export type carsMaxOrderByAggregateInput = {
    id?: SortOrder
    brandId?: SortOrder
    typeId?: SortOrder
    model?: SortOrder
    year?: SortOrder
    registration?: SortOrder
    pricePerMinute?: SortOrder
    engineCapacity?: SortOrder
    available?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type carsMinOrderByAggregateInput = {
    id?: SortOrder
    brandId?: SortOrder
    typeId?: SortOrder
    model?: SortOrder
    year?: SortOrder
    registration?: SortOrder
    pricePerMinute?: SortOrder
    engineCapacity?: SortOrder
    available?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type carsSumOrderByAggregateInput = {
    id?: SortOrder
    brandId?: SortOrder
    typeId?: SortOrder
    year?: SortOrder
    pricePerMinute?: SortOrder
    engineCapacity?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    fullName?: SortOrder
    isAdmin?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    fullName?: SortOrder
    isAdmin?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    fullName?: SortOrder
    isAdmin?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type carsCreateNestedOneWithoutBookingsInput = {
    create?: XOR<carsCreateWithoutBookingsInput, carsUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: carsCreateOrConnectWithoutBookingsInput
    connect?: carsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutBookingsInput = {
    create?: XOR<usersCreateWithoutBookingsInput, usersUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: usersCreateOrConnectWithoutBookingsInput
    connect?: usersWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type carsUpdateOneRequiredWithoutBookingsNestedInput = {
    create?: XOR<carsCreateWithoutBookingsInput, carsUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: carsCreateOrConnectWithoutBookingsInput
    upsert?: carsUpsertWithoutBookingsInput
    connect?: carsWhereUniqueInput
    update?: XOR<XOR<carsUpdateToOneWithWhereWithoutBookingsInput, carsUpdateWithoutBookingsInput>, carsUncheckedUpdateWithoutBookingsInput>
  }

  export type usersUpdateOneRequiredWithoutBookingsNestedInput = {
    create?: XOR<usersCreateWithoutBookingsInput, usersUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: usersCreateOrConnectWithoutBookingsInput
    upsert?: usersUpsertWithoutBookingsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutBookingsInput, usersUpdateWithoutBookingsInput>, usersUncheckedUpdateWithoutBookingsInput>
  }

  export type carsCreateNestedManyWithoutTypeInput = {
    create?: XOR<carsCreateWithoutTypeInput, carsUncheckedCreateWithoutTypeInput> | carsCreateWithoutTypeInput[] | carsUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: carsCreateOrConnectWithoutTypeInput | carsCreateOrConnectWithoutTypeInput[]
    createMany?: carsCreateManyTypeInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type carsUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<carsCreateWithoutTypeInput, carsUncheckedCreateWithoutTypeInput> | carsCreateWithoutTypeInput[] | carsUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: carsCreateOrConnectWithoutTypeInput | carsCreateOrConnectWithoutTypeInput[]
    createMany?: carsCreateManyTypeInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type carsUpdateManyWithoutTypeNestedInput = {
    create?: XOR<carsCreateWithoutTypeInput, carsUncheckedCreateWithoutTypeInput> | carsCreateWithoutTypeInput[] | carsUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: carsCreateOrConnectWithoutTypeInput | carsCreateOrConnectWithoutTypeInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutTypeInput | carsUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: carsCreateManyTypeInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutTypeInput | carsUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: carsUpdateManyWithWhereWithoutTypeInput | carsUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type carsUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<carsCreateWithoutTypeInput, carsUncheckedCreateWithoutTypeInput> | carsCreateWithoutTypeInput[] | carsUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: carsCreateOrConnectWithoutTypeInput | carsCreateOrConnectWithoutTypeInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutTypeInput | carsUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: carsCreateManyTypeInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutTypeInput | carsUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: carsUpdateManyWithWhereWithoutTypeInput | carsUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type carsCreateNestedManyWithoutBrandInput = {
    create?: XOR<carsCreateWithoutBrandInput, carsUncheckedCreateWithoutBrandInput> | carsCreateWithoutBrandInput[] | carsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: carsCreateOrConnectWithoutBrandInput | carsCreateOrConnectWithoutBrandInput[]
    createMany?: carsCreateManyBrandInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type carsUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<carsCreateWithoutBrandInput, carsUncheckedCreateWithoutBrandInput> | carsCreateWithoutBrandInput[] | carsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: carsCreateOrConnectWithoutBrandInput | carsCreateOrConnectWithoutBrandInput[]
    createMany?: carsCreateManyBrandInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type carsUpdateManyWithoutBrandNestedInput = {
    create?: XOR<carsCreateWithoutBrandInput, carsUncheckedCreateWithoutBrandInput> | carsCreateWithoutBrandInput[] | carsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: carsCreateOrConnectWithoutBrandInput | carsCreateOrConnectWithoutBrandInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutBrandInput | carsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: carsCreateManyBrandInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutBrandInput | carsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: carsUpdateManyWithWhereWithoutBrandInput | carsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type carsUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<carsCreateWithoutBrandInput, carsUncheckedCreateWithoutBrandInput> | carsCreateWithoutBrandInput[] | carsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: carsCreateOrConnectWithoutBrandInput | carsCreateOrConnectWithoutBrandInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutBrandInput | carsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: carsCreateManyBrandInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutBrandInput | carsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: carsUpdateManyWithWhereWithoutBrandInput | carsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type bookingsCreateNestedManyWithoutCarsInput = {
    create?: XOR<bookingsCreateWithoutCarsInput, bookingsUncheckedCreateWithoutCarsInput> | bookingsCreateWithoutCarsInput[] | bookingsUncheckedCreateWithoutCarsInput[]
    connectOrCreate?: bookingsCreateOrConnectWithoutCarsInput | bookingsCreateOrConnectWithoutCarsInput[]
    createMany?: bookingsCreateManyCarsInputEnvelope
    connect?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
  }

  export type carBrandsCreateNestedOneWithoutCarsInput = {
    create?: XOR<carBrandsCreateWithoutCarsInput, carBrandsUncheckedCreateWithoutCarsInput>
    connectOrCreate?: carBrandsCreateOrConnectWithoutCarsInput
    connect?: carBrandsWhereUniqueInput
  }

  export type carTypesCreateNestedOneWithoutCarsInput = {
    create?: XOR<carTypesCreateWithoutCarsInput, carTypesUncheckedCreateWithoutCarsInput>
    connectOrCreate?: carTypesCreateOrConnectWithoutCarsInput
    connect?: carTypesWhereUniqueInput
  }

  export type bookingsUncheckedCreateNestedManyWithoutCarsInput = {
    create?: XOR<bookingsCreateWithoutCarsInput, bookingsUncheckedCreateWithoutCarsInput> | bookingsCreateWithoutCarsInput[] | bookingsUncheckedCreateWithoutCarsInput[]
    connectOrCreate?: bookingsCreateOrConnectWithoutCarsInput | bookingsCreateOrConnectWithoutCarsInput[]
    createMany?: bookingsCreateManyCarsInputEnvelope
    connect?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type bookingsUpdateManyWithoutCarsNestedInput = {
    create?: XOR<bookingsCreateWithoutCarsInput, bookingsUncheckedCreateWithoutCarsInput> | bookingsCreateWithoutCarsInput[] | bookingsUncheckedCreateWithoutCarsInput[]
    connectOrCreate?: bookingsCreateOrConnectWithoutCarsInput | bookingsCreateOrConnectWithoutCarsInput[]
    upsert?: bookingsUpsertWithWhereUniqueWithoutCarsInput | bookingsUpsertWithWhereUniqueWithoutCarsInput[]
    createMany?: bookingsCreateManyCarsInputEnvelope
    set?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    disconnect?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    delete?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    connect?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    update?: bookingsUpdateWithWhereUniqueWithoutCarsInput | bookingsUpdateWithWhereUniqueWithoutCarsInput[]
    updateMany?: bookingsUpdateManyWithWhereWithoutCarsInput | bookingsUpdateManyWithWhereWithoutCarsInput[]
    deleteMany?: bookingsScalarWhereInput | bookingsScalarWhereInput[]
  }

  export type carBrandsUpdateOneRequiredWithoutCarsNestedInput = {
    create?: XOR<carBrandsCreateWithoutCarsInput, carBrandsUncheckedCreateWithoutCarsInput>
    connectOrCreate?: carBrandsCreateOrConnectWithoutCarsInput
    upsert?: carBrandsUpsertWithoutCarsInput
    connect?: carBrandsWhereUniqueInput
    update?: XOR<XOR<carBrandsUpdateToOneWithWhereWithoutCarsInput, carBrandsUpdateWithoutCarsInput>, carBrandsUncheckedUpdateWithoutCarsInput>
  }

  export type carTypesUpdateOneRequiredWithoutCarsNestedInput = {
    create?: XOR<carTypesCreateWithoutCarsInput, carTypesUncheckedCreateWithoutCarsInput>
    connectOrCreate?: carTypesCreateOrConnectWithoutCarsInput
    upsert?: carTypesUpsertWithoutCarsInput
    connect?: carTypesWhereUniqueInput
    update?: XOR<XOR<carTypesUpdateToOneWithWhereWithoutCarsInput, carTypesUpdateWithoutCarsInput>, carTypesUncheckedUpdateWithoutCarsInput>
  }

  export type bookingsUncheckedUpdateManyWithoutCarsNestedInput = {
    create?: XOR<bookingsCreateWithoutCarsInput, bookingsUncheckedCreateWithoutCarsInput> | bookingsCreateWithoutCarsInput[] | bookingsUncheckedCreateWithoutCarsInput[]
    connectOrCreate?: bookingsCreateOrConnectWithoutCarsInput | bookingsCreateOrConnectWithoutCarsInput[]
    upsert?: bookingsUpsertWithWhereUniqueWithoutCarsInput | bookingsUpsertWithWhereUniqueWithoutCarsInput[]
    createMany?: bookingsCreateManyCarsInputEnvelope
    set?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    disconnect?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    delete?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    connect?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    update?: bookingsUpdateWithWhereUniqueWithoutCarsInput | bookingsUpdateWithWhereUniqueWithoutCarsInput[]
    updateMany?: bookingsUpdateManyWithWhereWithoutCarsInput | bookingsUpdateManyWithWhereWithoutCarsInput[]
    deleteMany?: bookingsScalarWhereInput | bookingsScalarWhereInput[]
  }

  export type bookingsCreateNestedManyWithoutUsersInput = {
    create?: XOR<bookingsCreateWithoutUsersInput, bookingsUncheckedCreateWithoutUsersInput> | bookingsCreateWithoutUsersInput[] | bookingsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: bookingsCreateOrConnectWithoutUsersInput | bookingsCreateOrConnectWithoutUsersInput[]
    createMany?: bookingsCreateManyUsersInputEnvelope
    connect?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
  }

  export type bookingsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<bookingsCreateWithoutUsersInput, bookingsUncheckedCreateWithoutUsersInput> | bookingsCreateWithoutUsersInput[] | bookingsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: bookingsCreateOrConnectWithoutUsersInput | bookingsCreateOrConnectWithoutUsersInput[]
    createMany?: bookingsCreateManyUsersInputEnvelope
    connect?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
  }

  export type bookingsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<bookingsCreateWithoutUsersInput, bookingsUncheckedCreateWithoutUsersInput> | bookingsCreateWithoutUsersInput[] | bookingsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: bookingsCreateOrConnectWithoutUsersInput | bookingsCreateOrConnectWithoutUsersInput[]
    upsert?: bookingsUpsertWithWhereUniqueWithoutUsersInput | bookingsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: bookingsCreateManyUsersInputEnvelope
    set?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    disconnect?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    delete?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    connect?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    update?: bookingsUpdateWithWhereUniqueWithoutUsersInput | bookingsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: bookingsUpdateManyWithWhereWithoutUsersInput | bookingsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: bookingsScalarWhereInput | bookingsScalarWhereInput[]
  }

  export type bookingsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<bookingsCreateWithoutUsersInput, bookingsUncheckedCreateWithoutUsersInput> | bookingsCreateWithoutUsersInput[] | bookingsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: bookingsCreateOrConnectWithoutUsersInput | bookingsCreateOrConnectWithoutUsersInput[]
    upsert?: bookingsUpsertWithWhereUniqueWithoutUsersInput | bookingsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: bookingsCreateManyUsersInputEnvelope
    set?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    disconnect?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    delete?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    connect?: bookingsWhereUniqueInput | bookingsWhereUniqueInput[]
    update?: bookingsUpdateWithWhereUniqueWithoutUsersInput | bookingsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: bookingsUpdateManyWithWhereWithoutUsersInput | bookingsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: bookingsScalarWhereInput | bookingsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type carsCreateWithoutBookingsInput = {
    model: string
    year: number
    registration?: string | null
    pricePerMinute: number
    engineCapacity: number
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    brand: carBrandsCreateNestedOneWithoutCarsInput
    type: carTypesCreateNestedOneWithoutCarsInput
  }

  export type carsUncheckedCreateWithoutBookingsInput = {
    id?: number
    brandId: number
    typeId: number
    model: string
    year: number
    registration?: string | null
    pricePerMinute: number
    engineCapacity: number
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type carsCreateOrConnectWithoutBookingsInput = {
    where: carsWhereUniqueInput
    create: XOR<carsCreateWithoutBookingsInput, carsUncheckedCreateWithoutBookingsInput>
  }

  export type usersCreateWithoutBookingsInput = {
    username: string
    email: string
    password: string
    createdAt?: Date | string
    fullName?: string | null
    isAdmin?: boolean
    updatedAt?: Date | string | null
  }

  export type usersUncheckedCreateWithoutBookingsInput = {
    id?: number
    username: string
    email: string
    password: string
    createdAt?: Date | string
    fullName?: string | null
    isAdmin?: boolean
    updatedAt?: Date | string | null
  }

  export type usersCreateOrConnectWithoutBookingsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutBookingsInput, usersUncheckedCreateWithoutBookingsInput>
  }

  export type carsUpsertWithoutBookingsInput = {
    update: XOR<carsUpdateWithoutBookingsInput, carsUncheckedUpdateWithoutBookingsInput>
    create: XOR<carsCreateWithoutBookingsInput, carsUncheckedCreateWithoutBookingsInput>
    where?: carsWhereInput
  }

  export type carsUpdateToOneWithWhereWithoutBookingsInput = {
    where?: carsWhereInput
    data: XOR<carsUpdateWithoutBookingsInput, carsUncheckedUpdateWithoutBookingsInput>
  }

  export type carsUpdateWithoutBookingsInput = {
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    registration?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerMinute?: FloatFieldUpdateOperationsInput | number
    engineCapacity?: FloatFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brand?: carBrandsUpdateOneRequiredWithoutCarsNestedInput
    type?: carTypesUpdateOneRequiredWithoutCarsNestedInput
  }

  export type carsUncheckedUpdateWithoutBookingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    brandId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    registration?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerMinute?: FloatFieldUpdateOperationsInput | number
    engineCapacity?: FloatFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUpsertWithoutBookingsInput = {
    update: XOR<usersUpdateWithoutBookingsInput, usersUncheckedUpdateWithoutBookingsInput>
    create: XOR<usersCreateWithoutBookingsInput, usersUncheckedCreateWithoutBookingsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutBookingsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutBookingsInput, usersUncheckedUpdateWithoutBookingsInput>
  }

  export type usersUpdateWithoutBookingsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateWithoutBookingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type carsCreateWithoutTypeInput = {
    model: string
    year: number
    registration?: string | null
    pricePerMinute: number
    engineCapacity: number
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    bookings?: bookingsCreateNestedManyWithoutCarsInput
    brand: carBrandsCreateNestedOneWithoutCarsInput
  }

  export type carsUncheckedCreateWithoutTypeInput = {
    id?: number
    brandId: number
    model: string
    year: number
    registration?: string | null
    pricePerMinute: number
    engineCapacity: number
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    bookings?: bookingsUncheckedCreateNestedManyWithoutCarsInput
  }

  export type carsCreateOrConnectWithoutTypeInput = {
    where: carsWhereUniqueInput
    create: XOR<carsCreateWithoutTypeInput, carsUncheckedCreateWithoutTypeInput>
  }

  export type carsCreateManyTypeInputEnvelope = {
    data: carsCreateManyTypeInput | carsCreateManyTypeInput[]
    skipDuplicates?: boolean
  }

  export type carsUpsertWithWhereUniqueWithoutTypeInput = {
    where: carsWhereUniqueInput
    update: XOR<carsUpdateWithoutTypeInput, carsUncheckedUpdateWithoutTypeInput>
    create: XOR<carsCreateWithoutTypeInput, carsUncheckedCreateWithoutTypeInput>
  }

  export type carsUpdateWithWhereUniqueWithoutTypeInput = {
    where: carsWhereUniqueInput
    data: XOR<carsUpdateWithoutTypeInput, carsUncheckedUpdateWithoutTypeInput>
  }

  export type carsUpdateManyWithWhereWithoutTypeInput = {
    where: carsScalarWhereInput
    data: XOR<carsUpdateManyMutationInput, carsUncheckedUpdateManyWithoutTypeInput>
  }

  export type carsScalarWhereInput = {
    AND?: carsScalarWhereInput | carsScalarWhereInput[]
    OR?: carsScalarWhereInput[]
    NOT?: carsScalarWhereInput | carsScalarWhereInput[]
    id?: IntFilter<"cars"> | number
    brandId?: IntFilter<"cars"> | number
    typeId?: IntFilter<"cars"> | number
    model?: StringFilter<"cars"> | string
    year?: IntFilter<"cars"> | number
    registration?: StringNullableFilter<"cars"> | string | null
    pricePerMinute?: FloatFilter<"cars"> | number
    engineCapacity?: FloatFilter<"cars"> | number
    available?: BoolFilter<"cars"> | boolean
    createdAt?: DateTimeFilter<"cars"> | Date | string
    updatedAt?: DateTimeNullableFilter<"cars"> | Date | string | null
  }

  export type carsCreateWithoutBrandInput = {
    model: string
    year: number
    registration?: string | null
    pricePerMinute: number
    engineCapacity: number
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    bookings?: bookingsCreateNestedManyWithoutCarsInput
    type: carTypesCreateNestedOneWithoutCarsInput
  }

  export type carsUncheckedCreateWithoutBrandInput = {
    id?: number
    typeId: number
    model: string
    year: number
    registration?: string | null
    pricePerMinute: number
    engineCapacity: number
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    bookings?: bookingsUncheckedCreateNestedManyWithoutCarsInput
  }

  export type carsCreateOrConnectWithoutBrandInput = {
    where: carsWhereUniqueInput
    create: XOR<carsCreateWithoutBrandInput, carsUncheckedCreateWithoutBrandInput>
  }

  export type carsCreateManyBrandInputEnvelope = {
    data: carsCreateManyBrandInput | carsCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type carsUpsertWithWhereUniqueWithoutBrandInput = {
    where: carsWhereUniqueInput
    update: XOR<carsUpdateWithoutBrandInput, carsUncheckedUpdateWithoutBrandInput>
    create: XOR<carsCreateWithoutBrandInput, carsUncheckedCreateWithoutBrandInput>
  }

  export type carsUpdateWithWhereUniqueWithoutBrandInput = {
    where: carsWhereUniqueInput
    data: XOR<carsUpdateWithoutBrandInput, carsUncheckedUpdateWithoutBrandInput>
  }

  export type carsUpdateManyWithWhereWithoutBrandInput = {
    where: carsScalarWhereInput
    data: XOR<carsUpdateManyMutationInput, carsUncheckedUpdateManyWithoutBrandInput>
  }

  export type bookingsCreateWithoutCarsInput = {
    startTime: Date | string
    endTime: Date | string
    duration: number
    status?: string
    bookedPrice?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    users: usersCreateNestedOneWithoutBookingsInput
  }

  export type bookingsUncheckedCreateWithoutCarsInput = {
    id?: number
    userId: number
    startTime: Date | string
    endTime: Date | string
    duration: number
    status?: string
    bookedPrice?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type bookingsCreateOrConnectWithoutCarsInput = {
    where: bookingsWhereUniqueInput
    create: XOR<bookingsCreateWithoutCarsInput, bookingsUncheckedCreateWithoutCarsInput>
  }

  export type bookingsCreateManyCarsInputEnvelope = {
    data: bookingsCreateManyCarsInput | bookingsCreateManyCarsInput[]
    skipDuplicates?: boolean
  }

  export type carBrandsCreateWithoutCarsInput = {
    BrandName: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type carBrandsUncheckedCreateWithoutCarsInput = {
    id?: number
    BrandName: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type carBrandsCreateOrConnectWithoutCarsInput = {
    where: carBrandsWhereUniqueInput
    create: XOR<carBrandsCreateWithoutCarsInput, carBrandsUncheckedCreateWithoutCarsInput>
  }

  export type carTypesCreateWithoutCarsInput = {
    typeName: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type carTypesUncheckedCreateWithoutCarsInput = {
    id?: number
    typeName: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type carTypesCreateOrConnectWithoutCarsInput = {
    where: carTypesWhereUniqueInput
    create: XOR<carTypesCreateWithoutCarsInput, carTypesUncheckedCreateWithoutCarsInput>
  }

  export type bookingsUpsertWithWhereUniqueWithoutCarsInput = {
    where: bookingsWhereUniqueInput
    update: XOR<bookingsUpdateWithoutCarsInput, bookingsUncheckedUpdateWithoutCarsInput>
    create: XOR<bookingsCreateWithoutCarsInput, bookingsUncheckedCreateWithoutCarsInput>
  }

  export type bookingsUpdateWithWhereUniqueWithoutCarsInput = {
    where: bookingsWhereUniqueInput
    data: XOR<bookingsUpdateWithoutCarsInput, bookingsUncheckedUpdateWithoutCarsInput>
  }

  export type bookingsUpdateManyWithWhereWithoutCarsInput = {
    where: bookingsScalarWhereInput
    data: XOR<bookingsUpdateManyMutationInput, bookingsUncheckedUpdateManyWithoutCarsInput>
  }

  export type bookingsScalarWhereInput = {
    AND?: bookingsScalarWhereInput | bookingsScalarWhereInput[]
    OR?: bookingsScalarWhereInput[]
    NOT?: bookingsScalarWhereInput | bookingsScalarWhereInput[]
    id?: IntFilter<"bookings"> | number
    userId?: IntFilter<"bookings"> | number
    carId?: IntFilter<"bookings"> | number
    startTime?: DateTimeFilter<"bookings"> | Date | string
    endTime?: DateTimeFilter<"bookings"> | Date | string
    duration?: IntFilter<"bookings"> | number
    status?: StringFilter<"bookings"> | string
    bookedPrice?: FloatFilter<"bookings"> | number
    createdAt?: DateTimeFilter<"bookings"> | Date | string
    updatedAt?: DateTimeNullableFilter<"bookings"> | Date | string | null
  }

  export type carBrandsUpsertWithoutCarsInput = {
    update: XOR<carBrandsUpdateWithoutCarsInput, carBrandsUncheckedUpdateWithoutCarsInput>
    create: XOR<carBrandsCreateWithoutCarsInput, carBrandsUncheckedCreateWithoutCarsInput>
    where?: carBrandsWhereInput
  }

  export type carBrandsUpdateToOneWithWhereWithoutCarsInput = {
    where?: carBrandsWhereInput
    data: XOR<carBrandsUpdateWithoutCarsInput, carBrandsUncheckedUpdateWithoutCarsInput>
  }

  export type carBrandsUpdateWithoutCarsInput = {
    BrandName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type carBrandsUncheckedUpdateWithoutCarsInput = {
    id?: IntFieldUpdateOperationsInput | number
    BrandName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type carTypesUpsertWithoutCarsInput = {
    update: XOR<carTypesUpdateWithoutCarsInput, carTypesUncheckedUpdateWithoutCarsInput>
    create: XOR<carTypesCreateWithoutCarsInput, carTypesUncheckedCreateWithoutCarsInput>
    where?: carTypesWhereInput
  }

  export type carTypesUpdateToOneWithWhereWithoutCarsInput = {
    where?: carTypesWhereInput
    data: XOR<carTypesUpdateWithoutCarsInput, carTypesUncheckedUpdateWithoutCarsInput>
  }

  export type carTypesUpdateWithoutCarsInput = {
    typeName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type carTypesUncheckedUpdateWithoutCarsInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bookingsCreateWithoutUsersInput = {
    startTime: Date | string
    endTime: Date | string
    duration: number
    status?: string
    bookedPrice?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    cars: carsCreateNestedOneWithoutBookingsInput
  }

  export type bookingsUncheckedCreateWithoutUsersInput = {
    id?: number
    carId: number
    startTime: Date | string
    endTime: Date | string
    duration: number
    status?: string
    bookedPrice?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type bookingsCreateOrConnectWithoutUsersInput = {
    where: bookingsWhereUniqueInput
    create: XOR<bookingsCreateWithoutUsersInput, bookingsUncheckedCreateWithoutUsersInput>
  }

  export type bookingsCreateManyUsersInputEnvelope = {
    data: bookingsCreateManyUsersInput | bookingsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type bookingsUpsertWithWhereUniqueWithoutUsersInput = {
    where: bookingsWhereUniqueInput
    update: XOR<bookingsUpdateWithoutUsersInput, bookingsUncheckedUpdateWithoutUsersInput>
    create: XOR<bookingsCreateWithoutUsersInput, bookingsUncheckedCreateWithoutUsersInput>
  }

  export type bookingsUpdateWithWhereUniqueWithoutUsersInput = {
    where: bookingsWhereUniqueInput
    data: XOR<bookingsUpdateWithoutUsersInput, bookingsUncheckedUpdateWithoutUsersInput>
  }

  export type bookingsUpdateManyWithWhereWithoutUsersInput = {
    where: bookingsScalarWhereInput
    data: XOR<bookingsUpdateManyMutationInput, bookingsUncheckedUpdateManyWithoutUsersInput>
  }

  export type carsCreateManyTypeInput = {
    id?: number
    brandId: number
    model: string
    year: number
    registration?: string | null
    pricePerMinute: number
    engineCapacity: number
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type carsUpdateWithoutTypeInput = {
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    registration?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerMinute?: FloatFieldUpdateOperationsInput | number
    engineCapacity?: FloatFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookings?: bookingsUpdateManyWithoutCarsNestedInput
    brand?: carBrandsUpdateOneRequiredWithoutCarsNestedInput
  }

  export type carsUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    brandId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    registration?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerMinute?: FloatFieldUpdateOperationsInput | number
    engineCapacity?: FloatFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookings?: bookingsUncheckedUpdateManyWithoutCarsNestedInput
  }

  export type carsUncheckedUpdateManyWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    brandId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    registration?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerMinute?: FloatFieldUpdateOperationsInput | number
    engineCapacity?: FloatFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type carsCreateManyBrandInput = {
    id?: number
    typeId: number
    model: string
    year: number
    registration?: string | null
    pricePerMinute: number
    engineCapacity: number
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type carsUpdateWithoutBrandInput = {
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    registration?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerMinute?: FloatFieldUpdateOperationsInput | number
    engineCapacity?: FloatFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookings?: bookingsUpdateManyWithoutCarsNestedInput
    type?: carTypesUpdateOneRequiredWithoutCarsNestedInput
  }

  export type carsUncheckedUpdateWithoutBrandInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    registration?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerMinute?: FloatFieldUpdateOperationsInput | number
    engineCapacity?: FloatFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookings?: bookingsUncheckedUpdateManyWithoutCarsNestedInput
  }

  export type carsUncheckedUpdateManyWithoutBrandInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    registration?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerMinute?: FloatFieldUpdateOperationsInput | number
    engineCapacity?: FloatFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bookingsCreateManyCarsInput = {
    id?: number
    userId: number
    startTime: Date | string
    endTime: Date | string
    duration: number
    status?: string
    bookedPrice?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type bookingsUpdateWithoutCarsInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    bookedPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutBookingsNestedInput
  }

  export type bookingsUncheckedUpdateWithoutCarsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    bookedPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bookingsUncheckedUpdateManyWithoutCarsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    bookedPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bookingsCreateManyUsersInput = {
    id?: number
    carId: number
    startTime: Date | string
    endTime: Date | string
    duration: number
    status?: string
    bookedPrice?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type bookingsUpdateWithoutUsersInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    bookedPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cars?: carsUpdateOneRequiredWithoutBookingsNestedInput
  }

  export type bookingsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    bookedPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bookingsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    bookedPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CarTypesCountOutputTypeDefaultArgs instead
     */
    export type CarTypesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CarTypesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CarBrandsCountOutputTypeDefaultArgs instead
     */
    export type CarBrandsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CarBrandsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CarsCountOutputTypeDefaultArgs instead
     */
    export type CarsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CarsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use bookingsDefaultArgs instead
     */
    export type bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = bookingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use carTypesDefaultArgs instead
     */
    export type carTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = carTypesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use carBrandsDefaultArgs instead
     */
    export type carBrandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = carBrandsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use carsDefaultArgs instead
     */
    export type carsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = carsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}